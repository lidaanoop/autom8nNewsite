%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: random-banner-tech-3_11.eps
%%Creator: Adobe Illustrator(R) 22.0
%%For: Dodi 
%%CreationDate: 25/02/18
%%BoundingBox: 0 0 900 400
%%HiResBoundingBox: 0 0 900 400
%%CropBox: 0 0 900 400
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 22.0.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 22.0.1 x249 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 60 8%%BeginData: 16592 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45613D613C613D613C613D613C613D613C613D613C613D613C613D61%3C613D613C613D613C613D613C613D613C613D613C613D613C613D613C61%3D613C613D613C613D613C613D613C613D613C613D613C613D613C613D61%3C613D613C613D613C613D613C613D613C613D613C613D613C613D613C61%3D613C613D613C613D613C36613661366136613661366136613661366136%613661366136613661366136613661366136613661366136613661366136%613661366136613661366136613661366136613661366136613661366136%613661366136613661366136613661366136613661366136613661366136%613661366136613661366136613661366136616136613C6136613C613661%3C6136613C6136613C6136613C6136613C6136613C6136613C6136613C61%36613C6136613C6136613C6136613C6136613C6136613C6136613C613661%3C6136613C6136613C6136613C6136613C6136613C6136613C6136613C61%36613C6136613C6136613C6136613C6136613C6136613C6136613C363D36%61363D3661363D3661363D3661363D3661363D3661363D3661363D366136%3D3661363D3661363D3661363D3661363D3661363D3661363D3661363D36%61363D3661363D3661363D3661363D3661363D3661363D3661363D366136%3D3661363D3661363D3661363D3661363D3661363D3661363D3661363D36%61363D3661613C613D613C613D613C613D613C613D613C613D613C613D61%3C613D613C613D613C613D613C613D613C613D613C613D613C613D613C61%3D613C613D613C613D613C613D613C613D613C613D613C613D613C613D61%3C613D613C613D613C613D613C613D613C613D613C613D613C613D613C61%3D613C613D613C613D613C613D3661366136613661366136613661366136%613661366136613661366136613661366136613661366136613661366136%613661366136613661366136613661366136613661366136613661366136%613661366136613661366136613661366136613661366136613661366136%613661366136613661366136613661366136613661613C6136613C613661%3C6136613C6136613C6136613C6136613C6136613C6136613C61366161FF%858B618B8485618B60FF856136613C6136613C8BFF8BFD078561FF8B3661%3C6136613CAFFF8B858B858B85858561AF8536613C6136613C6136613C61%36613C6136613C6136613C6136613C6136613C6136613C61363661363D36%61363D3661363D3661363D3661363D3661363D3661363D3661363D366136%3D3685AFAFA9AF84FFA8FFA9616085363D3661363D366160FF84FFA985A9%FFA9AF36AF603D3661363D366184AFA8FFA9AFA8FFA9AF36AF843D366136%3D3661363D3661363D3661363D3661363D3661363D3661363D3661363D36%61363D613D613C613D613C613D613C613D613C613D613C613D613C613D61%3C613D613C613D613C6161AF85AF8561858B858B3C6161613C613D613C61%3D61858B858B608B858B6061858B3C613D613C613D85858B858B6085858B%606185613C613D613C613D613C613D613C613D613C613D613C613D613C61%3D613C613D613C613D613C36613661366136613661366136613661366136%613661366136613661366136613661366136613661366136613661366136%613661366136613661366136613661366136613661366136613661366136%613661366136613661366136613661366136613661366136613661366136%613661366136613661366136613661366136616136613C6136613C613661%3C6136613C6136613C6136613C6136613C6136613C6136613C6136613C53%2752282E2752356136613C6136613C6136613C592752282E275235613661%3C6136613C6136613C612852282E27522E5A36613C6136613C6136613C61%36613C6136613C6136613C6136613C6136613C6136613C6136613C363D36%61363D3661363D3661363D3661363D3661363D3661363D3661363D366136%3D3661363D3661FD072735363D3661363D3661363D36612EFD06272F363D%3661363D3661363D366136FD0727353D3661363D3661363D3661363D3661%363D3661363D3661363D3661363D3661363D3661363D3661613C613D613C%613D613C613D613C613D613C613D613C613D613C613D613C613D613C613D%613C613D2E2E52512727522F613C613D613C613D613C613D532852512727%522E613C613D613C613D613C613D61272E51512752275A3C613D613C613D%613C613D613C613D613C613D613C613D613C613D613C613D613C613D613C%613D36613661366136613661366136613661366136613661366136613661%366136613661366136613661FD0727593661366136613661366136612EFD%06272F36613661366136613661366136FD07273561366136613661366136%613661366136613661366136613661366136613661366136613661366161%3C6136613C6136613C6136613C6136613C6136613C6136613C6136613C61%36613C6136613C61362E2E52275227272F613C6136613C6136613C613653%2E524B5227272E613C6136613C6136613C613661272E2D512727275A3C61%36613C6136613C6136613C6136613C6136613C6136613C6136613C613661%3C6136613C61363661363D3661363D3661363D3661363D3661363D366136%3D3661363D3661363D3661363D3661363DFD0427F827272F3661363D3661%363D3661363D2E272727F827272E3661363D3661363D3661363D36272727%F82727273561363D3661363D3661363D3661363D3661363D3661363D3661%363D3661363D3661363D3661363D613D613C613D613C613D613C613D613C%613D613C613D613C613D613C613D613C613D613C613D613C522F2F277C4B%522F613D613C613D613C613D613C532E35277C51522E613D613C613D613C%613D613C6127352E52755227603D613C613D613C613D613C613D613C613D%613C613D613C613D613C613D613C613D613C613D613C3661366136613661%366136613661366136613661366136613661366136613661366136613661%3661FD0727353661366136613661366136612EFD06272E36613661366136%613661366136FD0727356136613661366136613661366136613661366136%613661366136613661366136613661366136616136613C6136613C613661%3C6136613C6136613C6136613C6136613C6136613C6136613C6136613C28%2E524B2727522F6136613C6136613C6136613C2F2852512727522E613661%3C6136613C6136613C61272E51512752275A36613C6136613C6136613C61%36613C6136613C6136613C6136613C6136613C6136613C6136613C363D36%61363D3661363D3661363D3661363D3661363D3661363D3661363D366136%3D3661363D3661272E275127272735363D3661363D3661363D36612E2E27%512727272F363D3661363D3661363D366136272751FD0427353D3661363D%3661363D3661363D3661363D3661363D3661363D3661363D3661363D3661%363D3661613C613D613C613D613C613D613C613D613C613D613C613D613C%613D613C613D613C613D613C613D2EFD06272F613C613D613C613D613C61%3D53FD06272E613C613D613C613D613C613D61FD07275A3C613D613C613D%613C613D613C613D613C613D613C613D613C613D613C613D613C613D613C%613D36613661366136613661366136613661366136613661366136613661%36613661366136613661366127352E752727275936613661366136613661%36612E2F2E752727272F36613661366136613661366136282E58FD042735%613661366136613661366136613661366136613661366136613661366136%613661366136613661613C6136613C6136613C6136613C6136613C613661%3C6136613C6136613C6136613C6136613C61362E2727275227272F613C61%36613C6136613C6136532727275227272E613C6136613C6136613C613661%272727522727275A3C6136613C6136613C6136613C6136613C6136613C61%36613C6136613C6136613C6136613C61363661363D3661363D3661363D36%61363D3661363D3661363D3661363D3661363D3661363D3661363D272752%A8A8A8272F3661363D3661363D3661363D2E27277DA8A8522E3661363D36%61363D3661363D362727A8A8FF7D273561363D3661363D3661363D366136%3D3661363D3661363D3661363D3661363D3661363D3661363D613D613C61%3D613C613D613C613D613C613D613C613D613C613D613C613D613C613D61%3C613D613C527DFD05FF2F613D613C613D613C613D613C5327FD05FF5961%3D613C613D613C613D613C6127FD05FFA8603D613C613D613C613D613C61%3D613C613D613C613D613C613D613C613D613C613D613C613D613C366136%613661366136613661366136613661366136613661366136613661366136%613661366136857DFD06FF843661366136613661366136617DA8FD06FF36%6136613661366136613661A8FD07FF5A6136613661366136613661366136%613661366136613661366136613661366136613661366136616136613C61%36613C6136613C6136613C6136613C6136613C6136613C6136613C613661%3C6136AFFD08FFA86136613C6136613C613661FD09FF8536613C6136613C%613661FD09FFA936613C6136613C6136613C6136613C6136613C6136613C%6136613C6136613C6136613C6136613C363D3661363D3661363D3661363D%3661363D3661363D3661363D3661363D3661363D3661363DFD0AFF843D36%61363D3661363D84FD09FFA9613661363D3661363D60FD0AFF853661363D%3661363D3661363D3661363D3661363D3661363D3661363D3661363D3661%363D3661613C613D613C613D613C613D613C613D613C613D613C613D613C%613D613C613D613C613D613CFD0BFF60613D613C613D613C8BFD0AFF8561%3D613C613D613C85FD0AFFA9613D613C613D613C613D613C613D613C613D%613C613D613C613D613C613D613C613D613C613D36613661366136613661%3661366136613661366136613661366136613661366136613661366160FD%09FF8561366136613661366136FD0AFF6136613661366136613685FD09FF%613661366136613661366136613661366136613661366136613661366136%613661366136613661613C6136613C6136613C6136613C6136613C613661%3C6136613C6136613C6136613C6136613C61368561858585618560613C61%36613C6136613C613661618585AF618560613C6136613C6136613C613661%3C61368B3C6136613C6136613C6136613C6136613C6136613C6136613C61%36613C6136613C6136613C6136613C61363661363D3661363D3661363D36%61363D3661363D3661363D3661363D3661363D3661363D3661363D366136%613661363D3661363D3661363D3661363D366136613661363D3661363D36%61363D3661363D3661363D6061363D3661363D3661363D3661363D366136%3D3661363D3661363D3661363D3661363D3661363D3661363D613D613C61%3D613C613D613C613D613C613D613C613D613C613D613C613D613C613D61%3C613D613C613D6185613D613C613D613C613D613C613D613C613D61608B%3D613C613D613C613D613C613D613C613D613CAF3D613C613D613C613D61%3C613D613C613D613C613D613C613D613C613D613C613D613C613D613C61%3D613C366136613661366136613661366184858461366136613661366136%613661366136613661366136613661366136613661366136613661366136%613661366136616061366136613661366136613661366136613661366136%613661366136613661366136613661366136613661366136613661366136%61366136613661366136616136613C6136613C6136613C61A98B85AF85AF%AFAFA9613C6136613C6136613C6136613C6136613C613661856136613C61%36613C6136613C6136613C613661618536613C6136613C6136613C613661%3C6136613C8B36613C6136613C6136613C6136613C6136613C6136613C61%36613C6136613C6136613C6136613C6136613C363D3661363D3661363D36%613685A8AFA9AFFFAFA9AF3661363D3661363D3661363D3661363D366136%3D3661608560855A85368560856061843D8461843D3661603D36855A8536%855A85606184618461846160855A3D3661363D3661363D3661363D366136%3D3661363D3661363D3661363D3661363D3661363D3661363D3661613C61%3D613C613D613C613D613C613D613C613D6160613D613C613D613C613D61%3C613D613C613D613C613D613C613D613C613D613C613D613C613D613C61%61613C6161613C613D613C613D613C613D613C613D613C613D613C613D61%3C613D613C613D613C613D613C613D613C613D613C613D613C613D613C61%3D613C613D36613661366136613661366136613661366136613661366136%613661366136613661366136613661366136613661366136613661366136%6136613661856136858561368B3661366136613661366136613661366136%613661366136613661366136613661366136613661366136613661366136%61366136613661366136613661613C6136613C6136613C6184A884A87EA8%84A87EA884A884613C6136613C6136613C6136613C6136613C6136613C61%36613C6136613C6136613C613685608BA9AF616160613C6136613C613661%3C6136613C6136613C6136613C6136613C6136613C6136613C6136613C61%36613C6136613C6136613C6136613C6136613C61363661363D3661363D36%618452FD0B277D3661363D3661363D3661363D3661363D3661363D366136%3D3661363D3661363D3661363D60FD05FF60853661363D3661363D366136%3D3661363D3661363D3661363D3661363D3661363D3661363D3661363D36%61363D3661363D3661363D3661363D3661363D613D613C613D613C613D8B%52522752277D7E7E275227527D613D613C613D613C613D613C613D613C61%3D613C613D613C613D613C613D613C613D6160FFFFFFC8CFFFFF85613D61%3C613D613C613D613C613D613C613D613C613D613C613D613C613D613C61%3D613C613D613C613D613C613D613C613D613C613D613C613D613C366136%6136613661366184522727277D84AF84842727277D366136613661366136%61366136613661366136613661366136613661366136613661A9FFFFFFC1%C79FC9FFFF36613661366136613661366136613661366136613661366136%613661366136613661366136613661366136613661366136613661366136%61366136616136613C6136613C61368B525252A8A9AFA8AFA95227527D61%36613C6136613C6136613C6136613C6136613C6136613C6136613C613661%3C85FD05FFC9C199A0FFFFFF60613C6160853C6136613CAF60AF61618461%3C6136613C6136613C6136613C6136613C6136613C6136613C6136613C61%36613C6136613C6136613C363D3661363D3661363D8452277D84A984A984%A97E27277D84616085608536855A8560616061846184616085608536855A%85608560618485FD07FFC292A8FD04FF846136618485A9AFA8FFA961A9AF%FFAFA8FFAFAFA8AFFFAF6061363D3661363D3661363D3661363D3661363D%3661363D3661363D3661363D3661613C613D613C613D613CAF525228AFA9%AFA8AFA98427527D613C613D613C613D613C613D613C613D613C613D613C%613D613C613D613C6185FD07FFA8AFAFFD05FF616160FFAFFFA9FFFFAF60%FF85FFA9FFFFAFAFFF85FF85613D613C613D613C613D613C613D613C613D%613C613D613C613D613C613D613C613D3661366136613661366184522727%275252522E522727277D3661366136613661366136613661366136613661%36613661366136613661366185AFA9FFA9AFA9AFA9AFA9FFAFAF84613661%366136613661366136613661366136613661366136613661366136613661%366136613661366136613661366136613661366136613661613C6136613C%6136613C857D7D5252527D5252527D52527D613C6136613C6136613C6136%613C6136613C6136613C6136613C6136613C6136616185858B6185A9AF85%8585613C6136613C6136613C6136613C6136613C6136613C6136613C6136%613C6136613C6136613C6136613C6136613C6136613C6136613C6136613C%61363661363D3661363D36FD06A87D527D7DFD06A861363D3661363D3661%363D3661363D3661363D3661363D3661363D3661363D3661363D3661363D%3661363D3661363D3661363D3661363D3661363D3661363D3661363D3661%363D3661363D3661363D3661363D3661363D3661363D3661363D3661363D%3661363D613D613C613D613C613D613C613D613C613D613C613D613C613D%613C613D613C613D613C613D613C613D613C613D613C613D613C613D613C%613D613C613D613C613D613C613D613C613D613C613D613C613D613C613D%613C613D613C613D613C613D613C613D613C613D613C613D613C613D613C%613D613C613D613C613D613C366136613661366136613661366136613661%366136613661366136613661366136613661366136613661366136613661%366136613661366136613661366136613661366136613661366136613661%366136613661366136613661366136613661366136613661366136613661%36613661366136613661366136613661366136616136613C6136613C6136%613C6136613C6136613C6136613C6136613C6136613C6136613C6136613C%6136613C6136613C6136613C6136613C6136613C6136613C6136613C6136%613C6136613C6136613C6136613C6136613C6136613C6136613C6136613C%6136613C6136613C6136613C6136613C6136613C6136613C6136613C363D%3661363D3661363D3661363D3661363D3661363D3661363D3661363D3661%363D3661363D3661363D3661363D3661363D3661363D3661363D3661363D%3661363D3661363D3661363D3661363D3661363D3661363D3661363D3661%363D3661363D3661363D3661363D3661363D3661363D3661363D3661363D%3661363D3661613C613D613C613D613C613D613C613D613C613D613C613D%613C613D613C613D613C613D613C613D613C613D613C613D613C613D613C%613D613C613D613C613D613C613D613C613D613C613D613C613D613C613D%613C613D613C613D613C613D613C613D613C613D613C613D613C613D613C%613D613C613D613C613D613C613D36613661366136613661366136613661%366136613661366136613661366136613661366136613661366136613661%366136613661366136613661366136613661366136613661366136613661%366136613661366136613661366136613661366136613661366136613661%36613661366136613661366136613661366136613661613C6136613C6136%613C6136613C6136613C6136613C6136613C6136613C6136613C6136613C%6136613C6136613C6136613C6136613C6136613C6136613C6136613C6136%613C6136613C6136613C6136613C6136613C6136613C6136613C6136613C%6136613C6136613C6136613C6136613C6136613C6136613C6136613C6136%3661363D3661363D3661363D3661363D3661363D3661363D3661363D3661%363D3661363D3661363D3661363D3661363D3661363D3661363D3661363D%3661363D3661363D3661363D3661363D3661363D3661363D3661363D3661%363D3661363D3661363D3661363D3661363D3661363D3661363D3661363D%3661363D3661363D613D613C613D613C613D613C613D613C613D613C613D%613C613D613C613D613C613D613C613D613C613D613C613D613C613D613C%613D613C613D613C613D613C613D613C613D613C613D613C613D613C613D%613C613D613C613D613C613D613C613D613C613D613C613D613C613D613C%613D613C613D613C613D613C613D613CFDFCFFFD04FFA9FFA9FFA9FFA9FF%A9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FF%A9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9858485%848584858485848584858485848584858485848584858485848584858485%848584858485848584858485848584858485848584858485848584858485%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 11 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c143 79.161210, 2017/08/11-10:28:36        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">random-banner-tech-2</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CC 22.0 (Macintosh)</xmp:CreatorTool>
         <xmp:CreateDate>2018-02-25T15:24:17+07:00</xmp:CreateDate>
         <xmp:ModifyDate>2018-02-25T15:24:17+07:00</xmp:ModifyDate>
         <xmp:MetadataDate>2018-02-25T15:24:17+07:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>116</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAdAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8AlWde+dLWYigArU0/CuAl&#xA;ICaafFIkIcqvJ9zuen3ZCRKdlaVpQF5Exx8v3rxgyOFod1Wm55UzF1UskYE4xcmzGIk7ldG1wY1L&#xA;ooeg5CppWnyPfLoGVC+bAiN7JLrd1I8wgAHGPdtz9o/R4YTaQAlqmor8x92ISQm/lRK+YtMY9Fu4&#xA;Pv8AUXIZh+7l/VP3N2l/vof1o/e1cf70S/67frzIjycafMtaZfaKb9oLqUSNGOTW8bqXB7clrypl&#xA;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&#xA;X1OtP3fX93x/DB/hn9Fundb8n//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:9aeb2260-1c1a-4f46-8a0d-fb719b540c95</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:9aeb2260-1c1a-4f46-8a0d-fb719b540c95</xmpMM:InstanceID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:9a15031f-5675-4474-aee6-0d4a0b5f9623</stRef:instanceID>
            <stRef:documentID>xmp.did:9a15031f-5675-4474-aee6-0d4a0b5f9623</stRef:documentID>
            <stRef:originalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4dfce2b5-1a82-4023-8981-3f8ef6bbc780</stEvt:instanceID>
                  <stEvt:when>2018-01-24T15:25:02+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.0 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9aeb2260-1c1a-4f46-8a0d-fb719b540c95</stEvt:instanceID>
                  <stEvt:when>2018-02-25T15:24:17+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.0 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Web</illustrator:StartupProfile>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>900.000000</stDim:w>
            <stDim:h>400.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=127 G=127 B=127</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>126</xmpG:red>
                           <xmpG:green>126</xmpG:green>
                           <xmpG:blue>126</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=175 G=175 B=175</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>175</xmpG:red>
                           <xmpG:green>175</xmpG:green>
                           <xmpG:blue>175</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=33 B=45</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>33</xmpG:green>
                           <xmpG:blue>45</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
         <pdfx:CreatorVersion>21.0.0</pdfx:CreatorVersion>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -400 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 400 li
900 400 li
900 0 li
cp
clp
900 400 mo
0 400 li
0 0 li
900 0 li
900 400 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.619898 .0629892 .00830091 0 cmyk
f
130.027 308.4 mo
122.027 308.39 li
122.029 306.39 li
130.029 306.4 li
130.027 308.4 li
cp
146.026 308.423 mo
138.026 308.411 li
138.029 306.411 li
146.029 306.423 li
146.026 308.423 li
cp
162.027 308.444 mo
154.027 308.434 li
154.029 306.434 li
162.029 306.444 li
162.027 308.444 li
cp
178.026 308.467 mo
170.026 308.455 li
170.029 306.455 li
178.029 306.467 li
178.026 308.467 li
cp
194.027 308.488 mo
186.027 308.478 li
186.029 306.478 li
194.029 306.488 li
194.027 308.488 li
cp
210.026 308.511 mo
202.026 308.499 li
202.029 306.499 li
210.029 306.511 li
210.026 308.511 li
cp
226.027 308.532 mo
218.027 308.522 li
218.029 306.522 li
226.029 306.532 li
226.027 308.532 li
cp
242.027 308.554 mo
234.027 308.543 li
234.029 306.543 li
242.029 306.554 li
242.027 308.554 li
cp
258.027 308.576 mo
250.027 308.565 li
250.029 306.565 li
258.029 306.576 li
258.027 308.576 li
cp
274.027 308.598 mo
266.027 308.587 li
266.029 306.587 li
274.029 306.598 li
274.027 308.598 li
cp
290.027 308.62 mo
282.027 308.609 li
282.029 306.609 li
290.029 306.62 li
290.027 308.62 li
cp
306.027 308.642 mo
298.027 308.631 li
298.029 306.631 li
306.029 306.642 li
306.027 308.642 li
cp
322.026 308.664 mo
314.026 308.652 li
314.029 306.652 li
322.029 306.664 li
322.026 308.664 li
cp
338.027 308.686 mo
330.027 308.675 li
330.029 306.675 li
338.029 306.686 li
338.027 308.686 li
cp
354.026 308.708 mo
346.026 308.696 li
346.029 306.696 li
354.029 306.708 li
354.026 308.708 li
cp
370.027 308.73 mo
362.027 308.719 li
362.029 306.719 li
370.029 306.73 li
370.027 308.73 li
cp
386.026 308.752 mo
378.026 308.74 li
378.029 306.74 li
386.029 306.752 li
386.026 308.752 li
cp
402.027 308.773 mo
394.027 308.763 li
394.029 306.763 li
402.029 306.773 li
402.027 308.773 li
cp
414.141 308.79 mo
410.027 308.784 li
410.029 306.784 li
414.143 306.79 li
414.141 308.79 li
cp
0 0 0 0 cmyk
f
305.779 198.657 mo
303.779 198.657 li
303.779 190.657 li
305.779 190.657 li
305.779 198.657 li
cp
305.779 214.657 mo
303.779 214.657 li
303.779 206.657 li
305.779 206.657 li
305.779 214.657 li
cp
305.779 230.657 mo
303.779 230.657 li
303.779 222.657 li
305.779 222.657 li
305.779 230.657 li
cp
305.779 246.657 mo
303.779 246.657 li
303.779 238.657 li
305.779 238.657 li
305.779 246.657 li
cp
320.161 248.275 mo
312.161 248.275 li
312.161 246.275 li
320.161 246.275 li
320.161 248.275 li
cp
336.161 248.275 mo
328.161 248.275 li
328.161 246.275 li
336.161 246.275 li
336.161 248.275 li
cp
352.161 248.275 mo
344.161 248.275 li
344.161 246.275 li
352.161 246.275 li
352.161 248.275 li
cp
368.161 248.275 mo
360.161 248.275 li
360.161 246.275 li
368.161 246.275 li
368.161 248.275 li
cp
384.161 248.275 mo
376.161 248.275 li
376.161 246.275 li
384.161 246.275 li
384.161 248.275 li
cp
400.161 248.275 mo
392.161 248.275 li
392.161 246.275 li
400.161 246.275 li
400.161 248.275 li
cp
416.161 248.275 mo
408.161 248.275 li
408.161 246.275 li
416.161 246.275 li
416.161 248.275 li
cp
426.84 253.574 mo
424.84 253.566 li
424.862 248.275 li
424.161 248.275 li
424.161 246.275 li
426.87 246.275 li
426.84 253.574 li
cp
426.772 269.574 mo
424.772 269.566 li
424.806 261.566 li
426.806 261.574 li
426.772 269.574 li
cp
426.705 285.574 mo
424.705 285.566 li
424.738 277.566 li
426.738 277.574 li
426.705 285.574 li
cp
426.648 298.889 mo
424.648 298.881 li
424.671 293.566 li
426.671 293.574 li
426.648 298.889 li
cp
f
451.825 203.161 mo
449.825 203.161 li
449.825 195.161 li
451.825 195.161 li
451.825 203.161 li
cp
451.825 219.161 mo
449.825 219.161 li
449.825 211.161 li
451.825 211.161 li
451.825 219.161 li
cp
451.825 235.161 mo
449.825 235.161 li
449.825 227.161 li
451.825 227.161 li
451.825 235.161 li
cp
451.825 251.161 mo
449.825 251.161 li
449.825 243.161 li
451.825 243.161 li
451.825 251.161 li
cp
451.825 267.161 mo
449.825 267.161 li
449.825 259.161 li
451.825 259.161 li
451.825 267.161 li
cp
451.825 278.304 mo
449.825 278.304 li
449.825 275.161 li
451.825 275.161 li
451.825 278.304 li
cp
f
596.333 198.657 mo
594.333 198.657 li
594.333 190.657 li
596.333 190.657 li
596.333 198.657 li
cp
596.333 214.657 mo
594.333 214.657 li
594.333 206.657 li
596.333 206.657 li
596.333 214.657 li
cp
596.333 230.657 mo
594.333 230.657 li
594.333 222.657 li
596.333 222.657 li
596.333 230.657 li
cp
596.333 246.657 mo
594.333 246.657 li
594.333 238.657 li
596.333 238.657 li
596.333 246.657 li
cp
491.951 248.275 mo
483.951 248.275 li
483.951 246.275 li
491.951 246.275 li
491.951 248.275 li
cp
507.951 248.275 mo
499.951 248.275 li
499.951 246.275 li
507.951 246.275 li
507.951 248.275 li
cp
523.951 248.275 mo
515.951 248.275 li
515.951 246.275 li
523.951 246.275 li
523.951 248.275 li
cp
539.951 248.275 mo
531.951 248.275 li
531.951 246.275 li
539.951 246.275 li
539.951 248.275 li
cp
555.951 248.275 mo
547.951 248.275 li
547.951 246.275 li
555.951 246.275 li
555.951 248.275 li
cp
571.951 248.275 mo
563.951 248.275 li
563.951 246.275 li
571.951 246.275 li
571.951 248.275 li
cp
587.951 248.275 mo
579.951 248.275 li
579.951 246.275 li
587.951 246.275 li
587.951 248.275 li
cp
473.271 253.573 mo
473.241 246.275 li
475.951 246.275 li
475.951 248.275 li
475.249 248.275 li
475.271 253.565 li
473.271 253.573 li
cp
473.339 269.573 mo
473.306 261.573 li
475.306 261.565 li
475.339 269.565 li
473.339 269.573 li
cp
473.406 285.573 mo
473.373 277.573 li
475.373 277.565 li
475.406 285.565 li
473.406 285.573 li
cp
473.463 298.889 mo
473.44 293.573 li
475.44 293.565 li
475.463 298.881 li
473.463 298.889 li
cp
f
332.502 185.557 mo
283.804 185.557 li
283.804 72.6865 li
332.502 72.6865 li
332.502 185.557 li
cp
.675196 .606043 .59646 .467231 cmyk
f
330.183 182.528 mo
286.122 182.528 li
286.122 76.7744 li
330.183 76.7744 li
330.183 182.528 li
cp
.710445 .650996 .639857 .693233 cmyk
f
329.003 92.6494 mo
287.262 92.6494 li
287.262 78.3203 li
329.003 78.3203 li
329.003 92.6494 li
cp
.694331 .632349 .621027 .583551 cmyk
f
329.003 86.082 mo
287.262 86.082 li
287.262 84.8877 li
329.003 84.8877 li
329.003 86.082 li
cp
.653956 .580224 .5682 .366552 cmyk
f
303.068 86.082 mo
299.693 86.082 li
299.388 86.082 299.139 85.833 299.139 85.5273 cv
299.139 85.4424 li
299.139 85.1357 299.388 84.8877 299.693 84.8877 cv
303.068 84.8877 li
303.374 84.8877 303.623 85.1357 303.623 85.4424 cv
303.623 85.5273 li
303.623 85.833 303.374 86.082 303.068 86.082 cv
cp
.235355 .0131228 1 0 cmyk
f
304.16 86.082 mo
304.242 86.082 li
304.538 86.082 304.779 85.8408 304.779 85.5449 cv
304.779 85.4248 li
304.779 85.1279 304.538 84.8877 304.242 84.8877 cv
304.16 84.8877 li
303.863 84.8877 303.623 85.1279 303.623 85.4248 cv
303.623 85.5449 li
303.623 85.8408 303.863 86.082 304.16 86.082 cv
cp
.155398 .354131 1 .00335698 cmyk
f
298.584 86.082 mo
289.364 86.082 li
289.058 86.082 288.81 85.833 288.81 85.5273 cv
288.81 85.4424 li
288.81 85.1357 289.058 84.8877 289.364 84.8877 cv
298.584 84.8877 li
298.891 84.8877 299.139 85.1357 299.139 85.4424 cv
299.139 85.5273 li
299.139 85.833 298.891 86.082 298.584 86.082 cv
cp
.670893 0 .0719921 0 cmyk
f
329.003 108.504 mo
287.262 108.504 li
287.262 94.1748 li
329.003 94.1748 li
329.003 108.504 li
cp
.694331 .632349 .621027 .583551 cmyk
f
329.003 101.937 mo
287.262 101.937 li
287.262 100.742 li
329.003 100.742 li
329.003 101.937 li
cp
.653956 .580224 .5682 .366552 cmyk
f
303.068 101.937 mo
299.693 101.937 li
299.388 101.937 299.139 101.688 299.139 101.382 cv
299.139 101.297 li
299.139 100.99 299.388 100.742 299.693 100.742 cv
303.068 100.742 li
303.374 100.742 303.623 100.99 303.623 101.297 cv
303.623 101.382 li
303.623 101.688 303.374 101.937 303.068 101.937 cv
cp
.235355 .0131228 1 0 cmyk
f
304.16 101.937 mo
304.242 101.937 li
304.538 101.937 304.779 101.696 304.779 101.399 cv
304.779 101.279 li
304.779 100.982 304.538 100.742 304.242 100.742 cv
304.16 100.742 li
303.863 100.742 303.623 100.982 303.623 101.279 cv
303.623 101.399 li
303.623 101.696 303.863 101.937 304.16 101.937 cv
cp
.155398 .354131 1 .00335698 cmyk
f
298.584 101.937 mo
289.364 101.937 li
289.058 101.937 288.81 101.688 288.81 101.382 cv
288.81 101.297 li
288.81 100.99 289.058 100.742 289.364 100.742 cv
298.584 100.742 li
298.891 100.742 299.139 100.99 299.139 101.297 cv
299.139 101.382 li
299.139 101.688 298.891 101.937 298.584 101.937 cv
cp
.670893 0 .0719921 0 cmyk
f
329.002 124.356 mo
287.26 124.356 li
287.26 110.027 li
329.002 110.027 li
329.002 124.356 li
cp
.694331 .632349 .621027 .583551 cmyk
f
328.997 117.796 mo
287.255 117.796 li
287.255 116.602 li
328.997 116.602 li
328.997 117.796 li
cp
.653956 .580224 .5682 .366552 cmyk
f
315.318 117.796 mo
311.944 117.796 li
311.638 117.796 311.39 117.547 311.39 117.241 cv
311.39 117.156 li
311.39 116.85 311.638 116.602 311.944 116.602 cv
315.318 116.602 li
315.625 116.602 315.873 116.85 315.873 117.156 cv
315.873 117.241 li
315.873 117.547 315.625 117.796 315.318 117.796 cv
cp
.235355 .0131228 1 0 cmyk
f
317.335 117.796 mo
317.417 117.796 li
317.714 117.796 317.954 117.555 317.954 117.259 cv
317.954 117.139 li
317.954 116.842 317.714 116.602 317.417 116.602 cv
317.335 116.602 li
317.039 116.602 316.798 116.842 316.798 117.139 cv
316.798 117.259 li
316.798 117.555 317.039 117.796 317.335 117.796 cv
cp
.155398 .354131 1 .00335698 cmyk
f
298.578 117.796 mo
289.358 117.796 li
289.052 117.796 288.804 117.547 288.804 117.241 cv
288.804 117.156 li
288.804 116.85 289.052 116.602 289.358 116.602 cv
298.578 116.602 li
298.885 116.602 299.133 116.85 299.133 117.156 cv
299.133 117.241 li
299.133 117.547 298.885 117.796 298.578 117.796 cv
cp
.670893 0 .0719921 0 cmyk
f
328.984 140.226 mo
287.243 140.226 li
287.243 125.896 li
328.984 125.896 li
328.984 140.226 li
cp
.694331 .632349 .621027 .583551 cmyk
f
328.984 133.658 mo
287.243 133.658 li
287.243 132.464 li
328.984 132.464 li
328.984 133.658 li
cp
.653956 .580224 .5682 .366552 cmyk
f
303.05 133.658 mo
299.676 133.658 li
299.369 133.658 299.121 133.409 299.121 133.104 cv
299.121 133.019 li
299.121 132.712 299.369 132.464 299.676 132.464 cv
303.05 132.464 li
303.356 132.464 303.604 132.712 303.604 133.019 cv
303.604 133.104 li
303.604 133.409 303.356 133.658 303.05 133.658 cv
cp
.235355 .0131228 1 0 cmyk
f
304.142 133.658 mo
304.224 133.658 li
304.521 133.658 304.761 133.417 304.761 133.121 cv
304.761 133.001 li
304.761 132.704 304.521 132.464 304.224 132.464 cv
304.142 132.464 li
303.845 132.464 303.604 132.704 303.604 133.001 cv
303.604 133.121 li
303.604 133.417 303.845 133.658 304.142 133.658 cv
cp
.155398 .354131 1 .00335698 cmyk
f
298.566 133.658 mo
289.347 133.658 li
289.04 133.658 288.792 133.409 288.792 133.104 cv
288.792 133.019 li
288.792 132.712 289.04 132.464 289.347 132.464 cv
298.566 132.464 li
298.873 132.464 299.121 132.712 299.121 133.019 cv
299.121 133.104 li
299.121 133.409 298.873 133.658 298.566 133.658 cv
cp
.670893 0 .0719921 0 cmyk
f
329.003 156.091 mo
287.262 156.091 li
287.262 141.761 li
329.003 141.761 li
329.003 156.091 li
cp
.694331 .632349 .621027 .583551 cmyk
f
329.003 149.522 mo
287.262 149.522 li
287.262 148.329 li
329.003 148.329 li
329.003 149.522 li
cp
.653956 .580224 .5682 .366552 cmyk
f
303.068 149.522 mo
299.693 149.522 li
299.388 149.522 299.139 149.274 299.139 148.968 cv
299.139 148.884 li
299.139 148.577 299.388 148.329 299.693 148.329 cv
303.068 148.329 li
303.374 148.329 303.623 148.577 303.623 148.884 cv
303.623 148.968 li
303.623 149.274 303.374 149.522 303.068 149.522 cv
cp
.235355 .0131228 1 0 cmyk
f
304.16 149.522 mo
304.242 149.522 li
304.538 149.522 304.779 149.282 304.779 148.985 cv
304.779 148.866 li
304.779 148.569 304.538 148.329 304.242 148.329 cv
304.16 148.329 li
303.863 148.329 303.623 148.569 303.623 148.866 cv
303.623 148.985 li
303.623 149.282 303.863 149.522 304.16 149.522 cv
cp
.155398 .354131 1 .00335698 cmyk
f
298.584 149.522 mo
289.364 149.522 li
289.058 149.522 288.81 149.274 288.81 148.968 cv
288.81 148.884 li
288.81 148.577 289.058 148.329 289.364 148.329 cv
298.584 148.329 li
298.891 148.329 299.139 148.577 299.139 148.884 cv
299.139 148.968 li
299.139 149.274 298.891 149.522 298.584 149.522 cv
cp
.670893 0 .0719921 0 cmyk
f
329.054 180.692 mo
287.313 180.692 li
287.313 157.626 li
329.054 157.626 li
329.054 180.692 li
cp
.675196 .606043 .59646 .467231 cmyk
f
332.502 190.657 mo
283.804 190.657 li
283.804 187.607 li
332.502 187.607 li
332.502 190.657 li
cp
f
330.183 187.607 mo
286.122 187.607 li
286.122 185.557 li
330.183 185.557 li
330.183 187.607 li
cp
.710445 .650996 .639857 .693233 cmyk
f
474.564 185.557 mo
425.866 185.557 li
425.866 72.6865 li
474.564 72.6865 li
474.564 185.557 li
cp
.675196 .606043 .59646 .467231 cmyk
f
472.245 182.528 mo
428.185 182.528 li
428.185 76.7744 li
472.245 76.7744 li
472.245 182.528 li
cp
.710445 .650996 .639857 .693233 cmyk
f
471.065 92.6494 mo
429.324 92.6494 li
429.324 78.3203 li
471.065 78.3203 li
471.065 92.6494 li
cp
.694331 .632349 .621027 .583551 cmyk
f
471.065 86.082 mo
429.324 86.082 li
429.324 84.8877 li
471.065 84.8877 li
471.065 86.082 li
cp
.653956 .580224 .5682 .366552 cmyk
f
445.131 86.082 mo
441.757 86.082 li
441.45 86.082 441.202 85.833 441.202 85.5273 cv
441.202 85.4424 li
441.202 85.1357 441.45 84.8877 441.757 84.8877 cv
445.131 84.8877 li
445.438 84.8877 445.686 85.1357 445.686 85.4424 cv
445.686 85.5273 li
445.686 85.833 445.438 86.082 445.131 86.082 cv
cp
.235355 .0131228 1 0 cmyk
f
446.223 86.082 mo
446.305 86.082 li
446.602 86.082 446.842 85.8408 446.842 85.5449 cv
446.842 85.4248 li
446.842 85.1279 446.602 84.8877 446.305 84.8877 cv
446.223 84.8877 li
445.926 84.8877 445.686 85.1279 445.686 85.4248 cv
445.686 85.5449 li
445.686 85.8408 445.926 86.082 446.223 86.082 cv
cp
.155398 .354131 1 .00335698 cmyk
f
440.647 86.082 mo
431.427 86.082 li
431.121 86.082 430.872 85.833 430.872 85.5273 cv
430.872 85.4424 li
430.872 85.1357 431.121 84.8877 431.427 84.8877 cv
440.647 84.8877 li
440.953 84.8877 441.202 85.1357 441.202 85.4424 cv
441.202 85.5273 li
441.202 85.833 440.953 86.082 440.647 86.082 cv
cp
.670893 0 .0719921 0 cmyk
f
471.065 108.504 mo
429.324 108.504 li
429.324 94.1748 li
471.065 94.1748 li
471.065 108.504 li
cp
.694331 .632349 .621027 .583551 cmyk
f
471.065 101.937 mo
429.324 101.937 li
429.324 100.742 li
471.065 100.742 li
471.065 101.937 li
cp
.653956 .580224 .5682 .366552 cmyk
f
445.131 101.937 mo
441.757 101.937 li
441.45 101.937 441.202 101.688 441.202 101.382 cv
441.202 101.297 li
441.202 100.99 441.45 100.742 441.757 100.742 cv
445.131 100.742 li
445.438 100.742 445.686 100.99 445.686 101.297 cv
445.686 101.382 li
445.686 101.688 445.438 101.937 445.131 101.937 cv
cp
.235355 .0131228 1 0 cmyk
f
446.223 101.937 mo
446.305 101.937 li
446.602 101.937 446.842 101.696 446.842 101.399 cv
446.842 101.279 li
446.842 100.982 446.602 100.742 446.305 100.742 cv
446.223 100.742 li
445.926 100.742 445.686 100.982 445.686 101.279 cv
445.686 101.399 li
445.686 101.696 445.926 101.937 446.223 101.937 cv
cp
.155398 .354131 1 .00335698 cmyk
f
440.647 101.937 mo
431.427 101.937 li
431.121 101.937 430.872 101.688 430.872 101.382 cv
430.872 101.297 li
430.872 100.99 431.121 100.742 431.427 100.742 cv
440.647 100.742 li
440.953 100.742 441.202 100.99 441.202 101.297 cv
441.202 101.382 li
441.202 101.688 440.953 101.937 440.647 101.937 cv
cp
.670893 0 .0719921 0 cmyk
f
471.064 124.356 mo
429.323 124.356 li
429.323 110.027 li
471.064 110.027 li
471.064 124.356 li
cp
.694331 .632349 .621027 .583551 cmyk
f
471.06 117.796 mo
429.318 117.796 li
429.318 116.602 li
471.06 116.602 li
471.06 117.796 li
cp
.653956 .580224 .5682 .366552 cmyk
f
457.381 117.796 mo
454.007 117.796 li
453.7 117.796 453.452 117.547 453.452 117.241 cv
453.452 117.156 li
453.452 116.85 453.7 116.602 454.007 116.602 cv
457.381 116.602 li
457.688 116.602 457.936 116.85 457.936 117.156 cv
457.936 117.241 li
457.936 117.547 457.688 117.796 457.381 117.796 cv
cp
.235355 .0131228 1 0 cmyk
f
459.398 117.796 mo
459.48 117.796 li
459.776 117.796 460.018 117.555 460.018 117.259 cv
460.018 117.139 li
460.018 116.842 459.776 116.602 459.48 116.602 cv
459.398 116.602 li
459.102 116.602 458.861 116.842 458.861 117.139 cv
458.861 117.259 li
458.861 117.555 459.102 117.796 459.398 117.796 cv
cp
.155398 .354131 1 .00335698 cmyk
f
440.641 117.796 mo
431.421 117.796 li
431.114 117.796 430.866 117.547 430.866 117.241 cv
430.866 117.156 li
430.866 116.85 431.114 116.602 431.421 116.602 cv
440.641 116.602 li
440.947 116.602 441.195 116.85 441.195 117.156 cv
441.195 117.241 li
441.195 117.547 440.947 117.796 440.641 117.796 cv
cp
.670893 0 .0719921 0 cmyk
f
471.048 140.226 mo
429.306 140.226 li
429.306 125.896 li
471.048 125.896 li
471.048 140.226 li
cp
.694331 .632349 .621027 .583551 cmyk
f
471.048 133.658 mo
429.306 133.658 li
429.306 132.464 li
471.048 132.464 li
471.048 133.658 li
cp
.653956 .580224 .5682 .366552 cmyk
f
445.112 133.658 mo
441.738 133.658 li
441.432 133.658 441.184 133.409 441.184 133.104 cv
441.184 133.019 li
441.184 132.712 441.432 132.464 441.738 132.464 cv
445.112 132.464 li
445.419 132.464 445.667 132.712 445.667 133.019 cv
445.667 133.104 li
445.667 133.409 445.419 133.658 445.112 133.658 cv
cp
.235355 .0131228 1 0 cmyk
f
446.204 133.658 mo
446.286 133.658 li
446.583 133.658 446.823 133.417 446.823 133.121 cv
446.823 133.001 li
446.823 132.704 446.583 132.464 446.286 132.464 cv
446.204 132.464 li
445.908 132.464 445.667 132.704 445.667 133.001 cv
445.667 133.121 li
445.667 133.417 445.908 133.658 446.204 133.658 cv
cp
.155398 .354131 1 .00335698 cmyk
f
440.629 133.658 mo
431.409 133.658 li
431.103 133.658 430.854 133.409 430.854 133.104 cv
430.854 133.019 li
430.854 132.712 431.103 132.464 431.409 132.464 cv
440.629 132.464 li
440.936 132.464 441.184 132.712 441.184 133.019 cv
441.184 133.104 li
441.184 133.409 440.936 133.658 440.629 133.658 cv
cp
.670893 0 .0719921 0 cmyk
f
471.065 156.091 mo
429.324 156.091 li
429.324 141.761 li
471.065 141.761 li
471.065 156.091 li
cp
.694331 .632349 .621027 .583551 cmyk
f
471.065 149.522 mo
429.324 149.522 li
429.324 148.329 li
471.065 148.329 li
471.065 149.522 li
cp
.653956 .580224 .5682 .366552 cmyk
f
445.131 149.522 mo
441.757 149.522 li
441.45 149.522 441.202 149.274 441.202 148.968 cv
441.202 148.884 li
441.202 148.577 441.45 148.329 441.757 148.329 cv
445.131 148.329 li
445.438 148.329 445.686 148.577 445.686 148.884 cv
445.686 148.968 li
445.686 149.274 445.438 149.522 445.131 149.522 cv
cp
.235355 .0131228 1 0 cmyk
f
446.223 149.522 mo
446.305 149.522 li
446.602 149.522 446.842 149.282 446.842 148.985 cv
446.842 148.866 li
446.842 148.569 446.602 148.329 446.305 148.329 cv
446.223 148.329 li
445.926 148.329 445.686 148.569 445.686 148.866 cv
445.686 148.985 li
445.686 149.282 445.926 149.522 446.223 149.522 cv
cp
.155398 .354131 1 .00335698 cmyk
f
440.647 149.522 mo
431.427 149.522 li
431.121 149.522 430.872 149.274 430.872 148.968 cv
430.872 148.884 li
430.872 148.577 431.121 148.329 431.427 148.329 cv
440.647 148.329 li
440.953 148.329 441.202 148.577 441.202 148.884 cv
441.202 148.968 li
441.202 149.274 440.953 149.522 440.647 149.522 cv
cp
.670893 0 .0719921 0 cmyk
f
471.116 180.692 mo
429.375 180.692 li
429.375 157.626 li
471.116 157.626 li
471.116 180.692 li
cp
.675196 .606043 .59646 .467231 cmyk
f
474.564 190.657 mo
425.866 190.657 li
425.866 187.607 li
474.564 187.607 li
474.564 190.657 li
cp
f
472.245 187.607 mo
428.185 187.607 li
428.185 185.557 li
472.245 185.557 li
472.245 187.607 li
cp
.710445 .650996 .639857 .693233 cmyk
f
619.066 185.557 mo
570.367 185.557 li
570.367 72.6865 li
619.066 72.6865 li
619.066 185.557 li
cp
.675196 .606043 .59646 .467231 cmyk
f
616.747 182.528 mo
572.687 182.528 li
572.687 76.7744 li
616.747 76.7744 li
616.747 182.528 li
cp
.710445 .650996 .639857 .693233 cmyk
f
615.567 92.6494 mo
573.825 92.6494 li
573.825 78.3203 li
615.567 78.3203 li
615.567 92.6494 li
cp
.694331 .632349 .621027 .583551 cmyk
f
615.567 86.082 mo
573.825 86.082 li
573.825 84.8877 li
615.567 84.8877 li
615.567 86.082 li
cp
.653956 .580224 .5682 .366552 cmyk
f
589.632 86.082 mo
586.258 86.082 li
585.952 86.082 585.703 85.833 585.703 85.5273 cv
585.703 85.4424 li
585.703 85.1357 585.952 84.8877 586.258 84.8877 cv
589.632 84.8877 li
589.938 84.8877 590.187 85.1357 590.187 85.4424 cv
590.187 85.5273 li
590.187 85.833 589.938 86.082 589.632 86.082 cv
cp
.235355 .0131228 1 0 cmyk
f
590.724 86.082 mo
590.806 86.082 li
591.103 86.082 591.343 85.8408 591.343 85.5449 cv
591.343 85.4248 li
591.343 85.1279 591.103 84.8877 590.806 84.8877 cv
590.724 84.8877 li
590.428 84.8877 590.187 85.1279 590.187 85.4248 cv
590.187 85.5449 li
590.187 85.8408 590.428 86.082 590.724 86.082 cv
cp
.155398 .354131 1 .00335698 cmyk
f
585.148 86.082 mo
575.929 86.082 li
575.622 86.082 575.374 85.833 575.374 85.5273 cv
575.374 85.4424 li
575.374 85.1357 575.622 84.8877 575.929 84.8877 cv
585.148 84.8877 li
585.455 84.8877 585.703 85.1357 585.703 85.4424 cv
585.703 85.5273 li
585.703 85.833 585.455 86.082 585.148 86.082 cv
cp
.670893 0 .0719921 0 cmyk
f
615.567 108.504 mo
573.825 108.504 li
573.825 94.1748 li
615.567 94.1748 li
615.567 108.504 li
cp
.694331 .632349 .621027 .583551 cmyk
f
615.567 101.937 mo
573.825 101.937 li
573.825 100.742 li
615.567 100.742 li
615.567 101.937 li
cp
.653956 .580224 .5682 .366552 cmyk
f
589.632 101.937 mo
586.258 101.937 li
585.952 101.937 585.703 101.688 585.703 101.382 cv
585.703 101.297 li
585.703 100.99 585.952 100.742 586.258 100.742 cv
589.632 100.742 li
589.938 100.742 590.187 100.99 590.187 101.297 cv
590.187 101.382 li
590.187 101.688 589.938 101.937 589.632 101.937 cv
cp
.235355 .0131228 1 0 cmyk
f
590.724 101.937 mo
590.806 101.937 li
591.103 101.937 591.343 101.696 591.343 101.399 cv
591.343 101.279 li
591.343 100.982 591.103 100.742 590.806 100.742 cv
590.724 100.742 li
590.428 100.742 590.187 100.982 590.187 101.279 cv
590.187 101.399 li
590.187 101.696 590.428 101.937 590.724 101.937 cv
cp
.155398 .354131 1 .00335698 cmyk
f
585.148 101.937 mo
575.929 101.937 li
575.622 101.937 575.374 101.688 575.374 101.382 cv
575.374 101.297 li
575.374 100.99 575.622 100.742 575.929 100.742 cv
585.148 100.742 li
585.455 100.742 585.703 100.99 585.703 101.297 cv
585.703 101.382 li
585.703 101.688 585.455 101.937 585.148 101.937 cv
cp
.670893 0 .0719921 0 cmyk
f
615.566 124.356 mo
573.824 124.356 li
573.824 110.027 li
615.566 110.027 li
615.566 124.356 li
cp
.694331 .632349 .621027 .583551 cmyk
f
615.562 117.796 mo
573.819 117.796 li
573.819 116.602 li
615.562 116.602 li
615.562 117.796 li
cp
.653956 .580224 .5682 .366552 cmyk
f
601.883 117.796 mo
598.509 117.796 li
598.202 117.796 597.954 117.547 597.954 117.241 cv
597.954 117.156 li
597.954 116.85 598.202 116.602 598.509 116.602 cv
601.883 116.602 li
602.189 116.602 602.438 116.85 602.438 117.156 cv
602.438 117.241 li
602.438 117.547 602.189 117.796 601.883 117.796 cv
cp
.235355 .0131228 1 0 cmyk
f
603.899 117.796 mo
603.981 117.796 li
604.278 117.796 604.519 117.555 604.519 117.259 cv
604.519 117.139 li
604.519 116.842 604.278 116.602 603.981 116.602 cv
603.899 116.602 li
603.603 116.602 603.362 116.842 603.362 117.139 cv
603.362 117.259 li
603.362 117.555 603.603 117.796 603.899 117.796 cv
cp
.155398 .354131 1 .00335698 cmyk
f
585.143 117.796 mo
575.923 117.796 li
575.616 117.796 575.368 117.547 575.368 117.241 cv
575.368 117.156 li
575.368 116.85 575.616 116.602 575.923 116.602 cv
585.143 116.602 li
585.449 116.602 585.697 116.85 585.697 117.156 cv
585.697 117.241 li
585.697 117.547 585.449 117.796 585.143 117.796 cv
cp
.670893 0 .0719921 0 cmyk
f
615.549 140.226 mo
573.808 140.226 li
573.808 125.896 li
615.549 125.896 li
615.549 140.226 li
cp
.694331 .632349 .621027 .583551 cmyk
f
615.549 133.658 mo
573.808 133.658 li
573.808 132.464 li
615.549 132.464 li
615.549 133.658 li
cp
.653956 .580224 .5682 .366552 cmyk
f
589.614 133.658 mo
586.24 133.658 li
585.934 133.658 585.686 133.409 585.686 133.104 cv
585.686 133.019 li
585.686 132.712 585.934 132.464 586.24 132.464 cv
589.614 132.464 li
589.921 132.464 590.169 132.712 590.169 133.019 cv
590.169 133.104 li
590.169 133.409 589.921 133.658 589.614 133.658 cv
cp
.235355 .0131228 1 0 cmyk
f
590.706 133.658 mo
590.788 133.658 li
591.085 133.658 591.325 133.417 591.325 133.121 cv
591.325 133.001 li
591.325 132.704 591.085 132.464 590.788 132.464 cv
590.706 132.464 li
590.409 132.464 590.169 132.704 590.169 133.001 cv
590.169 133.121 li
590.169 133.417 590.409 133.658 590.706 133.658 cv
cp
.155398 .354131 1 .00335698 cmyk
f
585.131 133.658 mo
575.91 133.658 li
575.604 133.658 575.355 133.409 575.355 133.104 cv
575.355 133.019 li
575.355 132.712 575.604 132.464 575.91 132.464 cv
585.131 132.464 li
585.437 132.464 585.686 132.712 585.686 133.019 cv
585.686 133.104 li
585.686 133.409 585.437 133.658 585.131 133.658 cv
cp
.670893 0 .0719921 0 cmyk
f
615.567 156.091 mo
573.825 156.091 li
573.825 141.761 li
615.567 141.761 li
615.567 156.091 li
cp
.694331 .632349 .621027 .583551 cmyk
f
615.567 149.522 mo
573.825 149.522 li
573.825 148.329 li
615.567 148.329 li
615.567 149.522 li
cp
.653956 .580224 .5682 .366552 cmyk
f
589.632 149.522 mo
586.258 149.522 li
585.952 149.522 585.703 149.274 585.703 148.968 cv
585.703 148.884 li
585.703 148.577 585.952 148.329 586.258 148.329 cv
589.632 148.329 li
589.938 148.329 590.187 148.577 590.187 148.884 cv
590.187 148.968 li
590.187 149.274 589.938 149.522 589.632 149.522 cv
cp
.235355 .0131228 1 0 cmyk
f
590.724 149.522 mo
590.806 149.522 li
591.103 149.522 591.343 149.282 591.343 148.985 cv
591.343 148.866 li
591.343 148.569 591.103 148.329 590.806 148.329 cv
590.724 148.329 li
590.428 148.329 590.187 148.569 590.187 148.866 cv
590.187 148.985 li
590.187 149.282 590.428 149.522 590.724 149.522 cv
cp
.155398 .354131 1 .00335698 cmyk
f
585.148 149.522 mo
575.929 149.522 li
575.622 149.522 575.374 149.274 575.374 148.968 cv
575.374 148.884 li
575.374 148.577 575.622 148.329 575.929 148.329 cv
585.148 148.329 li
585.455 148.329 585.703 148.577 585.703 148.884 cv
585.703 148.968 li
585.703 149.274 585.455 149.522 585.148 149.522 cv
cp
.670893 0 .0719921 0 cmyk
f
615.618 180.692 mo
573.877 180.692 li
573.877 157.626 li
615.618 157.626 li
615.618 180.692 li
cp
.675196 .606043 .59646 .467231 cmyk
f
619.066 190.657 mo
570.367 190.657 li
570.367 187.607 li
619.066 187.607 li
619.066 190.657 li
cp
f
616.747 187.607 mo
572.687 187.607 li
572.687 185.557 li
616.747 185.557 li
616.747 187.607 li
cp
.710445 .650996 .639857 .693233 cmyk
f
336.529 211.242 mo
336.714 211.242 li
342.571 210.2 346.475 204.607 345.433 198.751 cv
344.521 193.624 340.071 189.883 334.863 189.866 cv
334.753 189.866 li
334.753 189.181 334.845 188.496 334.845 187.793 cv
334.849 174.904 324.403 164.452 311.514 164.448 cv
301.473 164.445 292.555 170.866 289.372 180.39 cv
281.052 177.491 271.957 181.886 269.058 190.206 cv
266.158 198.526 270.554 207.621 278.873 210.521 cv
280.57 211.111 282.355 211.412 284.153 211.408 cv
335.789 211.408 li
336.455 211.408 li
336.529 211.242 li
cp
0 0 0 0 cmyk
f
480.472 211.395 mo
480.656 211.395 li
486.514 210.354 490.417 204.761 489.375 198.903 cv
488.463 193.776 484.014 190.036 478.806 190.019 cv
478.694 190.019 li
478.694 189.334 478.787 188.649 478.787 187.946 cv
478.791 175.057 468.346 164.604 455.456 164.602 cv
445.414 164.599 436.497 171.019 433.314 180.543 cv
424.994 177.644 415.899 182.038 413 190.358 cv
410.101 198.679 414.495 207.774 422.815 210.673 cv
424.513 211.265 426.298 211.565 428.095 211.562 cv
479.731 211.562 li
480.397 211.562 li
480.472 211.395 li
cp
f
622.394 209.896 mo
622.578 209.896 li
628.436 208.854 632.339 203.261 631.297 197.404 cv
630.385 192.277 625.936 188.537 620.728 188.52 cv
620.616 188.52 li
620.616 187.835 620.709 187.149 620.709 186.446 cv
620.713 173.558 610.268 163.105 597.378 163.102 cv
587.336 163.099 578.418 169.52 575.236 179.044 cv
566.916 176.145 557.82 180.539 554.922 188.859 cv
552.022 197.18 556.417 206.274 564.737 209.174 cv
566.435 209.766 568.22 210.065 570.017 210.063 cv
621.653 210.063 li
622.319 210.063 li
622.394 209.896 li
cp
f
168.522 331.314 mo
75.5342 331.314 li
75.5342 274.321 li
75.5342 271.56 77.7734 269.321 80.5342 269.321 cv
163.522 269.321 li
166.284 269.321 168.522 271.56 168.522 274.321 cv
168.522 331.314 li
cp
.0370794 .0246281 .0246281 0 cmyk
f
174.146 336.696 mo
66.6709 336.696 li
63.9102 336.696 61.6709 334.457 61.6709 331.696 cv
61.6709 331.246 li
179.146 331.246 li
179.146 331.696 li
179.146 334.457 176.907 336.696 174.146 336.696 cv
cp
.1355 .104463 .108492 0 cmyk
f
130.267 334.346 mo
110.55 334.346 li
108.838 334.346 107.45 332.958 107.45 331.246 cv
133.366 331.246 li
133.366 332.958 131.979 334.346 130.267 334.346 cv
cp
.516197 .432044 .432044 .0754711 cmyk
f
164.493 328.582 mo
79.5645 328.582 li
79.5645 273.258 li
164.493 273.258 li
164.493 328.582 li
cp
.675196 .606043 .59646 .467231 cmyk
f
141.241 316.7 mo
141.371 316.7 li
145.487 315.968 148.229 312.038 147.498 307.922 cv
146.856 304.319 143.73 301.691 140.07 301.679 cv
139.993 301.679 li
139.993 301.197 140.058 300.717 140.058 300.223 cv
140.061 291.165 132.72 283.82 123.663 283.817 cv
116.606 283.815 110.34 288.327 108.104 295.021 cv
102.257 292.982 95.8662 296.071 93.8281 301.918 cv
91.791 307.765 94.8799 314.155 100.727 316.192 cv
101.919 316.608 103.173 316.819 104.437 316.817 cv
140.721 316.817 li
141.189 316.817 li
141.241 316.7 li
cp
.233036 .0566415 .0245365 0 cmyk
f
499.286 314.651 mo
499.286 319.126 495.659 322.754 491.184 322.754 cv
489.072 322.754 487.145 321.943 485.7 320.623 cv
483.579 324.543 479.432 327.2 474.663 327.2 cv
472.376 327.2 470.235 326.589 468.389 325.519 cv
466.542 326.589 464.396 327.2 462.109 327.2 cv
460.178 327.2 458.35 326.765 456.717 325.987 cv
454.207 328.033 450.996 329.26 447.502 329.26 cv
442.591 329.26 438.249 326.84 435.598 323.128 cv
434.205 323.733 432.661 324.07 431.047 324.07 cv
430.753 324.07 430.464 324.061 430.176 324.032 cv
428.078 326.518 424.938 328.095 421.43 328.095 cv
418.659 328.095 416.121 327.114 414.142 325.477 cv
412.802 326.153 411.291 326.532 409.69 326.532 cv
406.191 326.532 403.123 324.719 401.366 321.982 cv
400.443 322.356 399.435 322.565 398.374 322.565 cv
393.998 322.565 390.456 319.023 390.456 314.651 cv
390.456 310.281 393.998 306.734 398.374 306.734 cv
400.415 306.734 402.266 307.506 403.673 308.775 cv
405.339 307.496 407.423 306.734 409.69 306.734 cv
411.291 306.734 412.802 307.113 414.142 307.79 cv
416.121 306.151 418.659 305.172 421.43 305.172 cv
421.723 305.172 422.012 305.181 422.301 305.205 cv
424.403 302.724 427.543 301.147 431.047 301.147 cv
433.675 301.147 436.1 302.032 438.036 303.523 cv
440.588 301.351 443.889 300.039 447.502 300.039 cv
450.996 300.039 454.207 301.27 456.717 303.315 cv
458.35 302.534 460.178 302.099 462.109 302.099 cv
464.396 302.099 466.542 302.709 468.389 303.779 cv
470.235 302.709 472.376 302.099 474.663 302.099 cv
479.432 302.099 483.579 304.76 485.705 308.681 cv
487.149 307.355 489.072 306.55 491.184 306.55 cv
495.659 306.55 499.286 310.177 499.286 314.651 cv
cp
.173556 .0470588 0 0 cmyk
ef
499.371 310.979 mo
499.371 315.009 496.108 318.272 492.079 318.272 cv
490.469 318.272 488.987 317.75 487.779 316.869 cv
485.577 319.015 482.57 320.331 479.251 320.331 cv
474.984 320.331 471.229 318.148 469.037 314.838 cv
468.071 315.037 467.067 315.142 466.04 315.142 cv
462.147 315.142 458.605 313.636 455.973 311.168 cv
453.577 312.106 450.963 312.617 448.23 312.617 cv
443.311 312.617 438.784 310.95 435.176 308.152 cv
433.063 309.587 430.517 310.42 427.77 310.42 cv
426.515 310.42 425.303 310.245 424.152 309.918 cv
421.875 313.839 417.627 316.472 412.769 316.472 cv
410.33 316.472 408.043 315.809 406.087 314.653 cv
404.421 316.301 402.134 317.315 399.604 317.315 cv
394.505 317.315 390.371 313.181 390.371 308.081 cv
390.371 302.985 394.505 298.852 399.604 298.852 cv
399.86 298.852 400.116 298.861 400.367 298.885 cv
402.181 293.79 407.049 290.144 412.769 290.144 cv
413.99 290.144 415.17 290.31 416.292 290.622 cv
418.569 286.645 422.854 283.969 427.77 283.969 cv
427.912 283.969 428.054 283.969 428.196 283.979 cv
431.184 275.806 439.025 269.972 448.23 269.972 cv
458.142 269.972 466.471 276.733 468.862 285.897 cv
474.17 286.924 478.465 290.798 480.094 295.864 cv
484.99 296.195 489.096 299.401 490.734 303.81 cv
491.17 303.73 491.619 303.687 492.079 303.687 cv
496.108 303.687 499.371 306.954 499.371 310.979 cv
cp
0 0 0 0 cmyk
ef
459.157 310.141 mo
459.157 318.03 452.761 324.427 444.871 324.427 cv
436.981 324.427 430.585 318.03 430.585 310.141 cv
430.585 302.25 436.981 295.855 444.871 295.855 cv
452.761 295.855 459.157 302.25 459.157 310.141 cv
cp
.173556 .0470588 0 0 cmyk
ef
436.776 291.031 mo
448.453 297.656 li
448.453 310.882 li
436.776 304.288 li
436.776 291.031 li
cp
.00515755 .560662 1 0 cmyk
f
460.131 291.031 mo
448.453 297.656 li
448.453 310.882 li
460.131 304.288 li
460.131 291.031 li
cp
.142184 .943206 1 .0463874 cmyk
f
448.453 284.42 mo
436.776 291.031 li
448.453 297.656 li
460.131 291.031 li
448.453 284.42 li
cp
.0280461 .265599 1 0 cmyk
f
447.412 310.14 mo
447.412 314.414 443.946 317.885 439.668 317.885 cv
437.026 317.885 434.691 316.562 433.296 314.541 cv
432.85 314.606 432.391 314.64 431.923 314.64 cv
431.136 314.64 430.37 314.546 429.639 314.367 cv
427.938 317.502 424.624 319.628 420.81 319.628 cv
415.263 319.628 410.768 315.133 410.768 309.587 cv
410.768 304.045 415.263 299.549 420.81 299.549 cv
421.758 299.549 422.677 299.681 423.544 299.928 cv
425.236 297.069 428.358 295.151 431.923 295.151 cv
436.512 295.151 440.356 298.32 441.39 302.59 cv
444.839 303.368 447.412 306.452 447.412 310.14 cv
cp
0 0 0 0 cmyk
ef
522.198 312.632 mo
529.334 312.632 li
529.334 315.331 li
518.838 315.331 li
518.838 299.022 li
522.198 299.022 li
522.198 312.632 li
cp
f
533.781 309.389 mo
533.781 310.541 533.997 311.422 534.43 312.031 cv
534.863 312.641 535.483 312.945 536.29 312.945 cv
537.074 312.945 537.686 312.645 538.127 312.042 cv
538.567 311.44 538.787 310.478 538.787 309.153 cv
538.787 308.024 538.567 307.149 538.127 306.528 cv
537.686 305.907 537.066 305.597 536.268 305.597 cv
535.476 305.597 534.863 305.905 534.43 306.523 cv
533.997 307.14 533.781 308.095 533.781 309.389 cv
cp
530.543 309.159 mo
530.543 307.957 530.775 306.885 531.238 305.944 cv
531.701 305.003 532.367 304.275 533.237 303.76 cv
534.107 303.245 535.117 302.987 536.268 302.987 cv
537.902 302.987 539.238 303.487 540.271 304.488 cv
541.307 305.489 541.883 306.848 542.002 308.565 cv
542.025 309.395 li
542.025 311.254 541.506 312.745 540.468 313.869 cv
539.43 314.993 538.037 315.555 536.29 315.555 cv
534.543 315.555 533.148 314.995 532.105 313.875 cv
531.064 312.755 530.543 311.232 530.543 309.305 cv
530.543 309.159 li
cp
f
548.365 313.079 mo
548.843 313.079 549.283 312.974 549.687 312.761 cv
550.09 312.548 550.389 312.262 550.583 311.903 cv
550.583 309.82 li
549.373 309.82 li
547.752 309.82 546.891 310.38 546.785 311.5 cv
546.774 311.69 li
546.774 312.094 546.916 312.426 547.2 312.688 cv
547.484 312.949 547.872 313.079 548.365 313.079 cv
cp
551.042 315.331 mo
550.893 315.04 550.784 314.678 550.717 314.244 cv
549.934 315.118 548.914 315.555 547.659 315.555 cv
546.472 315.555 545.488 315.212 544.707 314.524 cv
543.928 313.838 543.537 312.972 543.537 311.926 cv
543.537 310.642 544.014 309.656 544.965 308.969 cv
545.918 308.281 547.293 307.935 549.093 307.927 cv
550.583 307.927 li
550.583 307.232 li
550.583 306.672 550.439 306.225 550.151 305.889 cv
549.863 305.552 549.41 305.384 548.791 305.384 cv
548.246 305.384 547.818 305.515 547.508 305.776 cv
547.198 306.038 547.043 306.397 547.043 306.852 cv
543.807 306.852 li
543.807 306.149 544.022 305.5 544.455 304.902 cv
544.889 304.305 545.501 303.837 546.293 303.497 cv
547.084 303.157 547.973 302.987 548.959 302.987 cv
550.452 302.987 551.638 303.362 552.516 304.113 cv
553.393 304.863 553.831 305.918 553.831 307.277 cv
553.831 312.53 li
553.838 313.681 553.999 314.551 554.313 315.141 cv
554.313 315.331 li
551.042 315.331 li
cp
f
559.051 309.423 mo
559.051 310.56 559.249 311.431 559.645 312.036 cv
560.041 312.643 560.615 312.945 561.37 312.945 cv
562.371 312.945 563.076 312.523 563.486 311.678 cv
563.486 306.887 li
563.084 306.042 562.385 305.619 561.393 305.619 cv
559.832 305.619 559.051 306.887 559.051 309.423 cv
cp
555.814 309.182 mo
555.814 307.292 556.238 305.787 557.086 304.667 cv
557.933 303.547 559.092 302.987 560.563 302.987 cv
561.743 302.987 562.718 303.428 563.486 304.309 cv
563.486 298.126 li
566.735 298.126 li
566.735 315.331 li
563.813 315.331 li
563.654 314.043 li
562.849 315.051 561.811 315.555 560.541 315.555 cv
559.115 315.555 557.971 314.993 557.107 313.869 cv
556.245 312.745 555.814 311.183 555.814 309.182 cv
cp
f
578.53 308.23 mo
578.53 312.632 li
581.409 312.632 li
582.201 312.632 582.818 312.443 583.264 312.065 cv
583.707 311.689 583.93 311.168 583.93 310.503 cv
583.93 309.01 583.156 308.252 581.611 308.23 cv
578.53 308.23 li
cp
578.53 305.855 mo
581.018 305.855 li
582.713 305.825 583.561 305.149 583.561 303.827 cv
583.561 303.088 583.346 302.556 582.916 302.232 cv
582.486 301.906 581.809 301.744 580.883 301.744 cv
578.53 301.744 li
578.53 305.855 li
cp
575.17 315.331 mo
575.17 299.022 li
580.883 299.022 li
582.861 299.022 584.363 299.4 585.386 300.159 cv
586.408 300.917 586.92 302.027 586.92 303.491 cv
586.92 304.29 586.715 304.994 586.305 305.603 cv
585.894 306.211 585.322 306.657 584.59 306.941 cv
585.427 307.15 586.086 307.572 586.567 308.207 cv
587.049 308.842 587.29 309.618 587.29 310.537 cv
587.29 312.106 586.789 313.292 585.789 314.099 cv
584.788 314.905 583.361 315.316 581.51 315.331 cv
575.17 315.331 li
cp
f
593.943 313.079 mo
594.422 313.079 594.861 312.974 595.266 312.761 cv
595.668 312.548 595.967 312.262 596.162 311.903 cv
596.162 309.82 li
594.951 309.82 li
593.331 309.82 592.469 310.38 592.364 311.5 cv
592.354 311.69 li
592.354 312.094 592.494 312.426 592.779 312.688 cv
593.063 312.949 593.451 313.079 593.943 313.079 cv
cp
596.621 315.331 mo
596.471 315.04 596.363 314.678 596.296 314.244 cv
595.512 315.118 594.492 315.555 593.238 315.555 cv
592.051 315.555 591.066 315.212 590.286 314.524 cv
589.506 313.838 589.115 312.972 589.115 311.926 cv
589.115 310.642 589.592 309.656 590.544 308.969 cv
591.496 308.281 592.872 307.935 594.672 307.927 cv
596.162 307.927 li
596.162 307.232 li
596.162 306.672 596.018 306.225 595.73 305.889 cv
595.442 305.552 594.988 305.384 594.369 305.384 cv
593.824 305.384 593.396 305.515 593.086 305.776 cv
592.777 306.038 592.621 306.397 592.621 306.852 cv
589.385 306.852 li
589.385 306.149 589.602 305.5 590.034 304.902 cv
590.467 304.305 591.08 303.837 591.871 303.497 cv
592.662 303.157 593.551 302.987 594.537 302.987 cv
596.031 302.987 597.217 303.362 598.094 304.113 cv
598.971 304.863 599.41 305.918 599.41 307.277 cv
599.41 312.53 li
599.417 313.681 599.578 314.551 599.892 315.141 cv
599.892 315.331 li
596.621 315.331 li
cp
f
605.313 315.331 mo
602.064 315.331 li
602.064 298.126 li
605.313 298.126 li
605.313 315.331 li
cp
f
612.325 313.079 mo
612.803 313.079 613.244 312.974 613.646 312.761 cv
614.051 312.548 614.35 312.262 614.543 311.903 cv
614.543 309.82 li
613.334 309.82 li
611.713 309.82 610.851 310.38 610.746 311.5 cv
610.734 311.69 li
610.734 312.094 610.877 312.426 611.16 312.688 cv
611.444 312.949 611.832 313.079 612.325 313.079 cv
cp
615.002 315.331 mo
614.854 315.04 614.744 314.678 614.678 314.244 cv
613.894 315.118 612.874 315.555 611.619 315.555 cv
610.432 315.555 609.448 315.212 608.668 314.524 cv
607.888 313.838 607.498 312.972 607.498 311.926 cv
607.498 310.642 607.974 309.656 608.926 308.969 cv
609.878 308.281 611.254 307.935 613.053 307.927 cv
614.543 307.927 li
614.543 307.232 li
614.543 306.672 614.399 306.225 614.111 305.889 cv
613.824 305.552 613.371 305.384 612.751 305.384 cv
612.206 305.384 611.778 305.515 611.469 305.776 cv
611.158 306.038 611.004 306.397 611.004 306.852 cv
607.767 306.852 li
607.767 306.149 607.982 305.5 608.416 304.902 cv
608.85 304.305 609.461 303.837 610.253 303.497 cv
611.045 303.157 611.934 302.987 612.919 302.987 cv
614.412 302.987 615.598 303.362 616.476 304.113 cv
617.354 304.863 617.791 305.918 617.791 307.277 cv
617.791 312.53 li
617.799 313.681 617.959 314.551 618.273 315.141 cv
618.273 315.331 li
615.002 315.331 li
cp
f
623.258 303.211 mo
623.358 304.611 li
624.225 303.528 625.386 302.987 626.842 302.987 cv
628.127 302.987 629.082 303.364 629.709 304.118 cv
630.337 304.873 630.658 306 630.673 307.501 cv
630.673 315.331 li
627.436 315.331 li
627.436 307.58 li
627.436 306.893 627.286 306.395 626.988 306.084 cv
626.689 305.774 626.192 305.619 625.498 305.619 cv
624.587 305.619 623.903 306.008 623.448 306.784 cv
623.448 315.331 li
620.211 315.331 li
620.211 303.211 li
623.258 303.211 li
cp
f
638.167 312.945 mo
638.764 312.945 639.25 312.781 639.623 312.452 cv
639.996 312.124 640.19 311.687 640.205 311.142 cv
643.241 311.142 li
643.233 311.963 643.01 312.716 642.568 313.398 cv
642.129 314.082 641.525 314.612 640.76 314.989 cv
639.994 315.366 639.148 315.555 638.223 315.555 cv
636.49 315.555 635.123 315.005 634.123 313.903 cv
633.123 312.802 632.622 311.28 632.622 309.338 cv
632.622 309.125 li
632.622 307.259 633.119 305.769 634.111 304.656 cv
635.105 303.544 636.468 302.987 638.2 302.987 cv
639.717 302.987 640.932 303.418 641.847 304.281 cv
642.762 305.144 643.227 306.291 643.241 307.726 cv
640.205 307.726 li
640.19 307.095 639.996 306.582 639.623 306.189 cv
639.25 305.794 638.757 305.597 638.145 305.597 cv
637.391 305.597 636.82 305.872 636.436 306.422 cv
636.051 306.972 635.859 307.863 635.859 309.097 cv
635.859 309.434 li
635.859 310.683 636.05 311.58 636.431 312.126 cv
636.812 312.672 637.391 312.945 638.167 312.945 cv
cp
f
650.299 305.597 mo
649.656 305.597 649.135 305.815 648.736 306.25 cv
648.336 306.685 648.08 307.308 647.969 308.117 cv
652.471 308.117 li
652.471 307.858 li
652.456 307.139 652.262 306.581 651.889 306.188 cv
651.516 305.794 650.985 305.597 650.299 305.597 cv
cp
650.668 315.555 mo
648.891 315.555 647.443 315.01 646.327 313.92 cv
645.211 312.829 644.652 311.377 644.652 309.563 cv
644.652 309.249 li
644.652 308.031 644.888 306.943 645.358 305.983 cv
645.828 305.024 646.495 304.285 647.357 303.766 cv
648.221 303.247 649.204 302.987 650.31 302.987 cv
651.967 302.987 653.271 303.51 654.225 304.556 cv
655.176 305.601 655.652 307.083 655.652 309.002 cv
655.652 310.324 li
647.935 310.324 li
648.039 311.115 648.355 311.75 648.881 312.229 cv
649.408 312.706 650.074 312.945 650.881 312.945 cv
652.128 312.945 653.102 312.493 653.805 311.59 cv
655.395 313.371 li
654.909 314.058 654.252 314.594 653.424 314.979 cv
652.595 315.362 651.676 315.555 650.668 315.555 cv
cp
f
664.3 306.247 mo
663.859 306.187 663.471 306.157 663.135 306.157 cv
661.91 306.157 661.107 306.571 660.727 307.4 cv
660.727 315.331 li
657.489 315.331 li
657.489 303.211 li
660.547 303.211 li
660.637 304.656 li
661.287 303.544 662.187 302.987 663.336 302.987 cv
663.695 302.987 664.031 303.036 664.345 303.133 cv
664.3 306.247 li
cp
f
274.288 55.0527 mo
274.288 54.418 274.064 53.9316 273.616 53.5898 cv
273.168 53.252 272.361 52.8926 271.196 52.5156 cv
270.031 52.1387 269.109 51.7676 268.43 51.4004 cv
266.577 50.4004 265.651 49.0527 265.651 47.3574 cv
265.651 46.4766 265.899 45.6895 266.396 45 cv
266.894 44.3086 267.606 43.7695 268.536 43.3809 cv
269.466 42.9922 270.51 42.7988 271.667 42.7988 cv
272.832 42.7988 273.87 43.0098 274.781 43.4316 cv
275.691 43.8535 276.399 44.4492 276.903 45.2168 cv
277.407 45.9863 277.659 46.8613 277.659 47.8379 cv
274.299 47.8379 li
274.299 47.0918 274.064 46.5117 273.594 46.0977 cv
273.123 45.6816 272.462 45.4746 271.611 45.4746 cv
270.789 45.4746 270.15 45.6484 269.695 45.9961 cv
269.24 46.3438 269.012 46.8008 269.012 47.3691 cv
269.012 47.8984 269.279 48.3438 269.813 48.7012 cv
270.347 49.0605 271.133 49.3965 272.171 49.709 cv
274.083 50.2852 275.476 50.998 276.349 51.8496 cv
277.223 52.7012 277.659 53.7617 277.659 55.0293 cv
277.659 56.4414 277.126 57.5488 276.058 58.3516 cv
274.99 59.1543 273.553 59.5547 271.745 59.5547 cv
270.491 59.5547 269.349 59.3262 268.317 58.8672 cv
267.287 58.4082 266.501 57.7793 265.96 56.9785 cv
265.418 56.1797 265.147 55.2539 265.147 54.2012 cv
268.52 54.2012 li
268.52 56.002 269.595 56.9004 271.745 56.9004 cv
272.544 56.9004 273.168 56.7383 273.616 56.4141 cv
274.064 56.0879 274.288 55.6348 274.288 55.0527 cv
cp
f
284.93 49.5977 mo
284.287 49.5977 283.767 49.8145 283.367 50.25 cv
282.967 50.6855 282.712 51.3086 282.6 52.1172 cv
287.103 52.1172 li
287.103 51.8594 li
287.087 51.1387 286.894 50.582 286.52 50.1875 cv
286.146 49.7949 285.616 49.5977 284.93 49.5977 cv
cp
285.299 59.5547 mo
283.521 59.5547 282.075 59.0098 280.958 57.9199 cv
279.842 56.8301 279.284 55.377 279.284 53.5625 cv
279.284 53.25 li
279.284 52.0313 279.519 50.9434 279.989 49.9844 cv
280.46 49.0254 281.126 48.2852 281.989 47.7656 cv
282.852 47.248 283.835 46.9883 284.94 46.9883 cv
286.599 46.9883 287.903 47.5098 288.855 48.5566 cv
289.808 49.6016 290.283 51.084 290.283 53.002 cv
290.283 54.3242 li
282.565 54.3242 li
282.67 55.1152 282.986 55.75 283.513 56.2285 cv
284.039 56.707 284.705 56.9453 285.512 56.9453 cv
286.759 56.9453 287.733 56.4941 288.436 55.5898 cv
290.026 57.3711 li
289.54 58.0586 288.884 58.5938 288.055 58.9785 cv
287.226 59.3633 286.307 59.5547 285.299 59.5547 cv
cp
f
298.931 50.248 mo
298.49 50.1875 298.103 50.1582 297.766 50.1582 cv
296.541 50.1582 295.738 50.5723 295.357 51.4004 cv
295.357 59.332 li
292.12 59.332 li
292.12 47.2109 li
295.179 47.2109 li
295.269 48.6563 li
295.918 47.5449 296.817 46.9883 297.968 46.9883 cv
298.326 46.9883 298.662 47.0371 298.976 47.1328 cv
298.931 50.248 li
cp
f
305.227 55.377 mo
307.478 47.2109 li
310.86 47.2109 li
306.772 59.332 li
303.681 59.332 li
299.592 47.2109 li
302.975 47.2109 li
305.227 55.377 li
cp
f
317.347 49.5977 mo
316.704 49.5977 316.184 49.8145 315.784 50.25 cv
315.384 50.6855 315.129 51.3086 315.017 52.1172 cv
319.52 52.1172 li
319.52 51.8594 li
319.504 51.1387 319.311 50.582 318.937 50.1875 cv
318.563 49.7949 318.033 49.5977 317.347 49.5977 cv
cp
317.716 59.5547 mo
315.938 59.5547 314.492 59.0098 313.375 57.9199 cv
312.259 56.8301 311.701 55.377 311.701 53.5625 cv
311.701 53.25 li
311.701 52.0313 311.936 50.9434 312.406 49.9844 cv
312.877 49.0254 313.543 48.2852 314.406 47.7656 cv
315.269 47.248 316.252 46.9883 317.357 46.9883 cv
319.016 46.9883 320.32 47.5098 321.272 48.5566 cv
322.225 49.6016 322.7 51.084 322.7 53.002 cv
322.7 54.3242 li
314.982 54.3242 li
315.087 55.1152 315.403 55.75 315.93 56.2285 cv
316.456 56.707 317.122 56.9453 317.929 56.9453 cv
319.176 56.9453 320.15 56.4941 320.853 55.5898 cv
322.443 57.3711 li
321.957 58.0586 321.301 58.5938 320.472 58.9785 cv
319.643 59.3633 318.724 59.5547 317.716 59.5547 cv
cp
f
331.348 50.248 mo
330.907 50.1875 330.52 50.1582 330.183 50.1582 cv
328.958 50.1582 328.155 50.5723 327.774 51.4004 cv
327.774 59.332 li
324.537 59.332 li
324.537 47.2109 li
327.596 47.2109 li
327.686 48.6563 li
328.335 47.5449 329.234 46.9883 330.385 46.9883 cv
330.743 46.9883 331.079 47.0371 331.393 47.1328 cv
331.348 50.248 li
cp
f
346.347 59.332 mo
343.109 59.332 li
343.109 46.8535 li
339.245 48.0508 li
339.245 45.4199 li
345.999 43 li
346.347 43 li
346.347 59.332 li
cp
f
420.681 55.0527 mo
420.681 54.418 420.457 53.9316 420.009 53.5908 cv
419.561 53.252 418.754 52.8936 417.589 52.5156 cv
416.424 52.1387 415.502 51.7676 414.822 51.4014 cv
412.97 50.4004 412.044 49.0527 412.044 47.3574 cv
412.044 46.4766 412.292 45.6904 412.789 45 cv
413.286 44.3096 413.999 43.7695 414.929 43.3809 cv
415.858 42.9932 416.902 42.7988 418.06 42.7988 cv
419.225 42.7988 420.263 43.0098 421.174 43.4316 cv
422.084 43.8535 422.792 44.4492 423.296 45.2178 cv
423.8 45.9873 424.052 46.8613 424.052 47.8389 cv
420.691 47.8389 li
420.691 47.0928 420.457 46.5117 419.986 46.0977 cv
419.516 45.6826 418.854 45.4756 418.004 45.4756 cv
417.182 45.4756 416.543 45.6494 416.088 45.9971 cv
415.633 46.3438 415.404 46.8018 415.404 47.3691 cv
415.404 47.8994 415.672 48.3438 416.206 48.7021 cv
416.739 49.0605 417.525 49.3965 418.563 49.71 cv
420.476 50.2852 421.868 50.998 422.741 51.8496 cv
423.615 52.7012 424.052 53.7617 424.052 55.0303 cv
424.052 56.4424 423.519 57.5488 422.45 58.3516 cv
421.383 59.1543 419.945 59.5557 418.138 59.5557 cv
416.884 59.5557 415.741 59.3262 414.71 58.8672 cv
413.68 58.4082 412.894 57.7793 412.353 56.9795 cv
411.811 56.1807 411.54 55.2549 411.54 54.2021 cv
414.912 54.2021 li
414.912 56.002 415.987 56.9014 418.138 56.9014 cv
418.937 56.9014 419.561 56.7393 420.009 56.4141 cv
420.457 56.0889 420.681 55.6357 420.681 55.0527 cv
cp
f
431.322 49.5977 mo
430.68 49.5977 430.159 49.8154 429.76 50.251 cv
429.359 50.6855 429.104 51.3086 428.992 52.1182 cv
433.495 52.1182 li
433.495 51.8594 li
433.479 51.1396 433.286 50.582 432.912 50.1885 cv
432.539 49.7949 432.009 49.5977 431.322 49.5977 cv
cp
431.691 59.5557 mo
429.914 59.5557 428.468 59.0107 427.351 57.9209 cv
426.234 56.8301 425.677 55.3779 425.677 53.5635 cv
425.677 53.25 li
425.677 52.0322 425.911 50.9443 426.382 49.9844 cv
426.853 49.0254 427.519 48.2861 428.382 47.7666 cv
429.244 47.248 430.228 46.9883 431.333 46.9883 cv
432.991 46.9883 434.296 47.5107 435.248 48.5566 cv
436.2 49.6016 436.676 51.084 436.676 53.0029 cv
436.676 54.3252 li
428.958 54.3252 li
429.063 55.1162 429.379 55.751 429.905 56.2295 cv
430.432 56.707 431.098 56.9463 431.904 56.9463 cv
433.151 56.9463 434.126 56.4941 434.828 55.5908 cv
436.419 57.3721 li
435.933 58.0586 435.276 58.5947 434.447 58.9795 cv
433.618 59.3633 432.699 59.5557 431.691 59.5557 cv
cp
f
445.323 50.248 mo
444.883 50.1875 444.495 50.1582 444.158 50.1582 cv
442.934 50.1582 442.131 50.5723 441.75 51.4014 cv
441.75 59.332 li
438.513 59.332 li
438.513 47.2119 li
441.571 47.2119 li
441.661 48.6572 li
442.311 47.5449 443.21 46.9883 444.36 46.9883 cv
444.719 46.9883 445.055 47.0371 445.368 47.1338 cv
445.323 50.248 li
cp
f
451.619 55.3779 mo
453.87 47.2119 li
457.253 47.2119 li
453.165 59.332 li
450.073 59.332 li
445.984 47.2119 li
449.367 47.2119 li
451.619 55.3779 li
cp
f
463.739 49.5977 mo
463.097 49.5977 462.576 49.8154 462.177 50.251 cv
461.776 50.6855 461.521 51.3086 461.409 52.1182 cv
465.912 52.1182 li
465.912 51.8594 li
465.896 51.1396 465.703 50.582 465.329 50.1885 cv
464.956 49.7949 464.426 49.5977 463.739 49.5977 cv
cp
464.108 59.5557 mo
462.331 59.5557 460.885 59.0107 459.768 57.9209 cv
458.651 56.8301 458.094 55.3779 458.094 53.5635 cv
458.094 53.25 li
458.094 52.0322 458.328 50.9443 458.799 49.9844 cv
459.27 49.0254 459.936 48.2861 460.799 47.7666 cv
461.661 47.248 462.645 46.9883 463.75 46.9883 cv
465.408 46.9883 466.713 47.5107 467.665 48.5566 cv
468.617 49.6016 469.093 51.084 469.093 53.0029 cv
469.093 54.3252 li
461.375 54.3252 li
461.479 55.1162 461.796 55.751 462.322 56.2295 cv
462.849 56.707 463.515 56.9463 464.321 56.9463 cv
465.568 56.9463 466.543 56.4941 467.245 55.5908 cv
468.836 57.3721 li
468.35 58.0586 467.693 58.5947 466.864 58.9795 cv
466.035 59.3633 465.116 59.5557 464.108 59.5557 cv
cp
f
477.74 50.248 mo
477.3 50.1875 476.912 50.1582 476.575 50.1582 cv
475.351 50.1582 474.548 50.5723 474.167 51.4014 cv
474.167 59.332 li
470.93 59.332 li
470.93 47.2119 li
473.988 47.2119 li
474.078 48.6572 li
474.728 47.5449 475.627 46.9883 476.777 46.9883 cv
477.136 46.9883 477.472 47.0371 477.785 47.1338 cv
477.74 50.248 li
cp
f
496.055 59.332 mo
484.876 59.332 li
484.876 57.1143 li
490.151 51.4912 li
490.876 50.6992 491.412 50.0088 491.759 49.4189 cv
492.106 48.8291 492.28 48.2686 492.28 47.7383 cv
492.28 47.0146 492.097 46.4443 491.731 46.0303 cv
491.365 45.6162 490.843 45.4082 490.163 45.4082 cv
489.431 45.4082 488.854 45.6611 488.433 46.165 cv
488.011 46.6689 487.8 47.332 487.8 48.1533 cv
484.551 48.1533 li
484.551 47.1602 484.788 46.2529 485.263 45.4307 cv
485.736 44.6094 486.406 43.9658 487.272 43.499 cv
488.139 43.0322 489.121 42.7988 490.219 42.7988 cv
491.899 42.7988 493.204 43.2021 494.134 44.0088 cv
495.063 44.8154 495.528 45.9541 495.528 47.4248 cv
495.528 48.2314 495.319 49.0527 494.901 49.8896 cv
494.482 50.7256 493.766 51.7002 492.75 52.8125 cv
489.043 56.7217 li
496.055 56.7217 li
496.055 59.332 li
cp
f
560.252 55.0527 mo
560.252 54.418 560.028 53.9316 559.58 53.5908 cv
559.132 53.252 558.326 52.8936 557.16 52.5156 cv
555.996 52.1387 555.073 51.7676 554.394 51.4014 cv
552.541 50.4004 551.615 49.0527 551.615 47.3574 cv
551.615 46.4766 551.863 45.6904 552.361 45 cv
552.857 44.3096 553.57 43.7695 554.5 43.3809 cv
555.43 42.9932 556.474 42.7988 557.631 42.7988 cv
558.796 42.7988 559.834 43.0098 560.745 43.4316 cv
561.656 43.8535 562.363 44.4492 562.867 45.2178 cv
563.371 45.9873 563.623 46.8613 563.623 47.8389 cv
560.264 47.8389 li
560.264 47.0928 560.028 46.5117 559.558 46.0977 cv
559.088 45.6826 558.426 45.4756 557.575 45.4756 cv
556.754 45.4756 556.115 45.6494 555.66 45.9971 cv
555.204 46.3438 554.977 46.8018 554.977 47.3691 cv
554.977 47.8994 555.243 48.3438 555.777 48.7021 cv
556.311 49.0605 557.098 49.3965 558.135 49.71 cv
560.047 50.2852 561.439 50.998 562.313 51.8496 cv
563.188 52.7012 563.623 53.7617 563.623 55.0303 cv
563.623 56.4424 563.09 57.5488 562.021 58.3516 cv
560.954 59.1543 559.517 59.5557 557.709 59.5557 cv
556.455 59.5557 555.313 59.3262 554.281 58.8672 cv
553.252 58.4082 552.465 57.7793 551.924 56.9795 cv
551.383 56.1807 551.111 55.2549 551.111 54.2021 cv
554.483 54.2021 li
554.483 56.002 555.559 56.9014 557.709 56.9014 cv
558.508 56.9014 559.132 56.7393 559.58 56.4141 cv
560.028 56.0889 560.252 55.6357 560.252 55.0527 cv
cp
f
570.894 49.5977 mo
570.251 49.5977 569.73 49.8154 569.331 50.251 cv
568.932 50.6855 568.676 51.3086 568.563 52.1182 cv
573.066 52.1182 li
573.066 51.8594 li
573.051 51.1396 572.857 50.582 572.484 50.1885 cv
572.11 49.7949 571.58 49.5977 570.894 49.5977 cv
cp
571.264 59.5557 mo
569.486 59.5557 568.039 59.0107 566.922 57.9209 cv
565.807 56.8301 565.248 55.3779 565.248 53.5635 cv
565.248 53.25 li
565.248 52.0322 565.482 50.9443 565.953 49.9844 cv
566.424 49.0254 567.09 48.2861 567.953 47.7666 cv
568.815 47.248 569.799 46.9883 570.904 46.9883 cv
572.563 46.9883 573.867 47.5107 574.819 48.5566 cv
575.771 49.6016 576.248 51.084 576.248 53.0029 cv
576.248 54.3252 li
568.529 54.3252 li
568.635 55.1162 568.95 55.751 569.477 56.2295 cv
570.003 56.707 570.67 56.9463 571.477 56.9463 cv
572.723 56.9463 573.697 56.4941 574.399 55.5908 cv
575.99 57.3721 li
575.504 58.0586 574.848 58.5947 574.019 58.9795 cv
573.189 59.3633 572.271 59.5557 571.264 59.5557 cv
cp
f
584.895 50.248 mo
584.455 50.1875 584.066 50.1582 583.73 50.1582 cv
582.506 50.1582 581.703 50.5723 581.322 51.4014 cv
581.322 59.332 li
578.084 59.332 li
578.084 47.2119 li
581.143 47.2119 li
581.232 48.6572 li
581.882 47.5449 582.781 46.9883 583.932 46.9883 cv
584.29 46.9883 584.627 47.0371 584.939 47.1338 cv
584.895 50.248 li
cp
f
591.19 55.3779 mo
593.441 47.2119 li
596.824 47.2119 li
592.736 59.332 li
589.645 59.332 li
585.557 47.2119 li
588.939 47.2119 li
591.19 55.3779 li
cp
f
603.311 49.5977 mo
602.668 49.5977 602.147 49.8154 601.748 50.251 cv
601.348 50.6855 601.093 51.3086 600.98 52.1182 cv
605.483 52.1182 li
605.483 51.8594 li
605.469 51.1396 605.274 50.582 604.9 50.1885 cv
604.527 49.7949 603.998 49.5977 603.311 49.5977 cv
cp
603.68 59.5557 mo
601.902 59.5557 600.456 59.0107 599.34 57.9209 cv
598.223 56.8301 597.665 55.3779 597.665 53.5635 cv
597.665 53.25 li
597.665 52.0322 597.9 50.9443 598.371 49.9844 cv
598.841 49.0254 599.508 48.2861 600.37 47.7666 cv
601.232 47.248 602.217 46.9883 603.322 46.9883 cv
604.979 46.9883 606.284 47.5107 607.236 48.5566 cv
608.188 49.6016 608.664 51.084 608.664 53.0029 cv
608.664 54.3252 li
600.947 54.3252 li
601.051 55.1162 601.367 55.751 601.894 56.2295 cv
602.42 56.707 603.086 56.9463 603.893 56.9463 cv
605.141 56.9463 606.114 56.4941 606.816 55.5908 cv
608.407 57.3721 li
607.922 58.0586 607.265 58.5947 606.436 58.9795 cv
605.607 59.3633 604.688 59.5557 603.68 59.5557 cv
cp
f
617.313 50.248 mo
616.871 50.1875 616.483 50.1582 616.146 50.1582 cv
614.922 50.1582 614.119 50.5723 613.738 51.4014 cv
613.738 59.332 li
610.502 59.332 li
610.502 47.2119 li
613.56 47.2119 li
613.649 48.6572 li
614.299 47.5449 615.199 46.9883 616.349 46.9883 cv
616.707 46.9883 617.043 47.0371 617.357 47.1338 cv
617.313 50.248 li
cp
f
627.74 49.7432 mo
629.465 49.7432 li
630.287 49.7432 630.896 49.5381 631.291 49.1279 cv
631.688 48.7168 631.885 48.1719 631.885 47.4922 cv
631.885 46.835 631.689 46.3232 631.297 45.957 cv
630.904 45.5918 630.365 45.4082 629.678 45.4082 cv
629.059 45.4082 628.539 45.5781 628.121 45.918 cv
627.703 46.2578 627.494 46.7002 627.494 47.2461 cv
624.257 47.2461 li
624.257 46.3945 624.486 45.6309 624.945 44.9551 cv
625.405 44.2793 626.047 43.751 626.873 43.3701 cv
627.697 42.9893 628.607 42.7988 629.6 42.7988 cv
631.325 42.7988 632.677 43.2109 633.654 44.0361 cv
634.633 44.8613 635.122 45.999 635.122 47.4473 cv
635.122 48.1943 634.895 48.8809 634.439 49.5088 cv
633.983 50.1357 633.387 50.6172 632.646 50.9531 cv
633.565 51.2822 634.25 51.7754 634.702 52.4316 cv
635.154 53.0889 635.38 53.8662 635.38 54.7617 cv
635.38 56.2109 634.852 57.3721 633.795 58.2451 cv
632.738 59.1191 631.34 59.5557 629.6 59.5557 cv
627.973 59.5557 626.641 59.127 625.606 58.2676 cv
624.572 57.4092 624.055 56.2744 624.055 54.8623 cv
627.293 54.8623 li
627.293 55.4746 627.521 55.9756 627.981 56.3633 cv
628.44 56.752 629.006 56.9463 629.678 56.9463 cv
630.447 56.9463 631.051 56.7432 631.487 56.3359 cv
631.924 55.9287 632.143 55.3887 632.143 54.7168 cv
632.143 53.0889 631.246 52.2754 629.455 52.2754 cv
627.74 52.2754 li
627.74 49.7432 li
cp
f
107.703 247.673 mo
107.576 249.428 106.928 250.81 105.76 251.817 cv
104.591 252.825 103.051 253.329 101.139 253.329 cv
99.0488 253.329 97.4033 252.626 96.2051 251.218 cv
95.0059 249.811 94.4072 247.878 94.4072 245.421 cv
94.4072 244.425 li
94.4072 242.857 94.6836 241.475 95.2363 240.28 cv
95.7891 239.085 96.5781 238.168 97.6055 237.53 cv
98.6318 236.892 99.8242 236.572 101.184 236.572 cv
103.066 236.572 104.582 237.076 105.732 238.084 cv
106.882 239.093 107.547 240.508 107.726 242.33 cv
104.365 242.33 li
104.283 241.276 103.99 240.514 103.486 240.039 cv
102.982 239.565 102.215 239.328 101.184 239.328 cv
100.064 239.328 99.2256 239.73 98.6699 240.532 cv
98.1133 241.335 97.8271 242.58 97.8125 244.268 cv
97.8125 245.5 li
97.8125 247.262 98.0791 248.551 98.6133 249.364 cv
99.1465 250.178 99.9893 250.585 101.139 250.585 cv
102.178 250.585 102.952 250.349 103.463 249.874 cv
103.975 249.399 104.268 248.666 104.343 247.673 cv
107.703 247.673 li
cp
f
113.113 253.106 mo
109.865 253.106 li
109.865 235.9 li
113.113 235.9 li
113.113 253.106 li
cp
f
119.195 253.106 mo
115.947 253.106 li
115.947 240.985 li
119.195 240.985 li
119.195 253.106 li
cp
115.758 237.849 mo
115.758 237.363 115.92 236.964 116.244 236.65 cv
116.569 236.337 117.012 236.18 117.572 236.18 cv
118.125 236.18 118.564 236.337 118.894 236.65 cv
119.223 236.964 119.387 237.363 119.387 237.849 cv
119.387 238.342 119.221 238.745 118.888 239.059 cv
118.556 239.372 118.117 239.529 117.572 239.529 cv
117.026 239.529 116.588 239.372 116.256 239.059 cv
115.924 238.745 115.758 238.342 115.758 237.849 cv
cp
f
127.07 243.371 mo
126.428 243.371 125.908 243.589 125.508 244.024 cv
125.108 244.459 124.854 245.082 124.74 245.892 cv
129.244 245.892 li
129.244 245.633 li
129.229 244.913 129.035 244.356 128.661 243.962 cv
128.287 243.568 127.758 243.371 127.07 243.371 cv
cp
127.44 253.329 mo
125.663 253.329 124.217 252.784 123.1 251.694 cv
121.983 250.604 121.426 249.151 121.426 247.337 cv
121.426 247.023 li
121.426 245.806 121.66 244.718 122.131 243.758 cv
122.602 242.799 123.268 242.06 124.131 241.54 cv
124.992 241.022 125.977 240.762 127.082 240.762 cv
128.74 240.762 130.045 241.284 130.996 242.33 cv
131.949 243.375 132.425 244.857 132.425 246.776 cv
132.425 248.099 li
124.707 248.099 li
124.812 248.89 125.127 249.524 125.654 250.003 cv
126.18 250.481 126.847 250.72 127.653 250.72 cv
128.9 250.72 129.875 250.268 130.576 249.364 cv
132.168 251.146 li
131.682 251.832 131.025 252.368 130.195 252.753 cv
129.367 253.137 128.448 253.329 127.44 253.329 cv
cp
f
137.242 240.985 mo
137.342 242.386 li
138.209 241.303 139.369 240.762 140.826 240.762 cv
142.11 240.762 143.066 241.139 143.693 241.893 cv
144.32 242.648 144.642 243.774 144.656 245.275 cv
144.656 253.106 li
141.42 253.106 li
141.42 245.355 li
141.42 244.667 141.27 244.169 140.972 243.858 cv
140.673 243.549 140.176 243.394 139.482 243.394 cv
138.57 243.394 137.887 243.782 137.432 244.559 cv
137.432 253.106 li
134.195 253.106 li
134.195 240.985 li
137.242 240.985 li
cp
f
150.986 238.006 mo
150.986 240.985 li
153.059 240.985 li
153.059 243.36 li
150.986 243.36 li
150.986 249.409 li
150.986 249.857 151.071 250.178 151.243 250.372 cv
151.415 250.566 151.744 250.663 152.229 250.663 cv
152.588 250.663 152.904 250.638 153.182 250.585 cv
153.182 253.038 li
152.547 253.232 151.893 253.329 151.221 253.329 cv
148.951 253.329 147.793 252.184 147.748 249.891 cv
147.748 243.36 li
145.979 243.36 li
145.979 240.985 li
147.748 240.985 li
147.748 238.006 li
150.986 238.006 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 22.0.1%%For: (Dodi ) ()%%Title: (random-banner-tech-3_11.eps)%%CreationDate: 25/02/18 15.24%%Canvassize: 16383%AI9_DataStream%Gb",KGsg''p\47`qB"p%'LbXf"]4H@?kEMUG78>=8n_t+lh1.qn$PCCbTrBDRPlT%U_oi5S=H!-Z[LsePKC[.`>s*USaKY"rGT*R%XCspt15)Br#XuuL$4@4p48\^oM5fXG7[J:B\CYq/p0^^>*Oe78/QR@(h;XH;#'[0.#MX7RT>c[t[4VdojXp/8d;eN-gV:+M7BIgX%9g0mqh[Ub<,ffA<][^jZUUIi@M=(#f-/9R"%K2ZA5Hoo1O:Fks6($r_LKD,2X$r_X8:i0)"o'DoOtK;pFg5O?p<[[n2]_Y2EbK0J%+oN$mR=_;.OJ&BWWZg]t7Fah4JPSuV7FNe?mQVABS'PWU=F$dBIPOn[%24Y`(!R/8&TgqSAk47@3[DZ$(&[GHPpKGW%JV-HL165t%R\H5p8d^Ds'beFP$NB`4l&)H5,*C"^9e)_71f=EQ;>&r.Vg\HD1Dohf@E7ba_1^o%NAgBZh6SLM)A(U4Y!oj'XP'N&a;NDA.0a&H%FniI;MVd_D@6bH>+JMCZ_7So<U;7-7[4L=PJ8P3'I[>q4;'EpFmFAEHM;F"rVl4Q9o(^01q(JJ(A2*]4hPJc;(rQkeA2pqLH]Btj%l*rWEC/NCKGOX/CK9>GYI6fCC5`cGWW#HYg*=RGphi@YV[J81Yg30*KnoB5)d.nalB2a?/"bBSG7ulDTg[,D82Nitiqdd`agC>+A%?J:-DiP=U1M>X4ZLK=H!*l8>.SItS:C=2NDGWiWS>/0G'^rstbhX0"P6h_U`E*7b#0Eep7_Mfn[UbL^['Di2ZLW[eF:O5$1H;*^=%X$[ur_=ZLLGKr8*eR]K83b0e",+Y3mrD#GAR^uHTkV"-0al*/frdQCGe9O$\]:RrTFBmW.ne$Q'c2fNTn9f>'d^;-g?r-mf@08ot%^jtn)XJ#es9f46\NW4m$?UKJT!IePsIqou%2GO*TXnl""`_TaW]<[B>AXVCl1b^d]V.n#IC&"$l+d]&LQ_lVYI\*En4Jmrt-N%7d%dmPh;6n\Cl^QGR#7BUA?;c]rDVclN\7K`*;)OcD[)\'I;B[AS8@Oa$rLR(L"@S6[7//K)k2f`>tn2GArSc"r)HWVNjNBC;fr/LCC%>Cr`k3oP#T$YtF10dk[M1hWm%rl09E-W73E==.lZ>!?t8^$muO1`ApVqZeFFD+n/r[M&S:.;@&+oMfu`)_E'Vp\W%pTKgMOou#[S%'CA(hCO2'8(k*YFf$Eeng+"p2edm8j?W]DDs7i'UNYMDN>Za5g9m`"_'&'LqHn<Ye"":]EIf)C)o$LK.0%t2l]?m!FktuIN(G2!9%m.V=Xn:-N)CZgaPX<"18[AJ/QIeXkmkkN0od5I\4nMg#Hm0X7#aS+d,D)kc$*Sp]3p;`%Tg/)fN;Wq6PkCqfk[,%^'[+/m$[,"Q!%^IS45;;%)T0:h6#e'n3dLIt<S-6:@<cY;.\*#dmnNo+6Qdkla^J$oP;bAX:dm*jALO8E>_@Hq5/q(k1tA\XL_IR&bfQGh9=C\Y43%o(qIrHtc2M'Z^f6;H+@D+%`2NJku4FlR)E653YjO5uf?[pnU-c:B(efl&T9"^CA(6g[K[7AU5a!Ud(+OrB'eM5D=epNDb@(qGXTH%^Oo>Y,Hr8IkLb"RS+\B2g]*1\6N&1+Wi2@7fAM.$[SK0'),p$sOSXh`YHMaZeme3"5ee"<o:4P3<XjP)D'!aGbpT=$@`mFU>Lql(%heMrR.\A]OY*Lh9ASW0OTsn<N<bCQ4Vq1k*%+RaNM%%q5BVJ?Y'LTi8%Fus*(/A:;J6H[:"<HsipLr7A##[07n%XaMA]X15U;NUo%TnZ`g^h&+^8u#6Ai4fTc,,!0='Vn`ja+Q9;Zbf\I<c2S;R+"mS?;A<aneoTB7>JBUP5H1^6YScM8\b-c8EjPH3^\<*BIE84d_\#.%&`E8CmiXXLS6bDbG=__Zc][5XGLg[IC]I%.--;86paM8t!ol,tpu9J_N.=j,X5uR&%b`f)%Z#Ip/ru]Xs!cKL6^)VkJJ:oN0j^0h%eC$)ED";>rC`rDbnd8,iPAef4F]D=.W"\l'@o<Y6`r;c]B[oZHa^kHJ>nrJ<piP`q$"[K*PLfW2ZcqmCnc,uB<--K9m!5i2]Y:";%K&?0>pO3>fY!YFO4\tq\CGdOGJe#Sq<'8J&jKe9X<265,n+f1`Qi,_<Nr+Jn;^B%bcrQMr6P7H0ni5s!o;-i-4&A[j4No_8VkZVj%=Ybs]qMB88/mYY1'f*NC'00X&]8E+4a!hKl/0!o8@n0U?m%=QJ,g1#fOFDYV7u(I]M!&5_5^hAaSq[Afs)2iKQOJ@mF)+$'B-UL\%]Uk`tp=L9;"#?_K]T1O7TU5)Af/,&Zq-]M5S5^G`08$Ws825kN#U\dGZ_G>gZUIN@%Y9WRc[i3qb5NBJ>`Q:fcGf'EE=.FM?+4:N%!1FgP^(G<ZdfiSB<=Q_+s1E31AsP-m;fVXa>Z`5,S"[%jn=3E6!jjL<:4GC%SEjn9@IcOk.QUCO$O^MJYGbJUXqU"Vj?l>*<]4tB%?_a=HP&u;VGRh+-%+VL7]<j<=!=X&!O46X/W]m(S*n?c][a.r3-L1\6Q$i-R\`t.j<)RcH]g7k1@)#X3a^l+q*SRB\^?ftAK/rF6%2!f5b,W/-m`:C`MZSCV(o-L;YbN<URY^.[uo31L:T7%.P.E`1H6Pl;eL>ph$De![&$!p6sl=KRZf<p'[Pa+]?]l.=?n`Z:<^Ge3o%%$fZop&9U?H/+e#\pfZ&!;<nDq5cs`BcZ4$OSYAU5K=j5#L/llIs;.jr3@gN,lK]BIT+O4KBJb*[cb,j&Ku%)"cg$:&n`3AUp<Qr%r=RAl=O,O&!n0pijUM@ae>Fn1gdkN?/>%CEe)h:_T+!%6hOg@4[%FOjqY/CR6\l&TVJK_cKLTH:dj3>?Gg<fp5&N<-L*CP>A>6?C%5E-0,`)W>9)RP#\@ri)47[Fl2]G4C2r%h<n7O8<i:cuZr*ljZjO/)5,T+BtUpl0:us(P6[JI^O]8<",>X17jnAuIB%mI!"0F)u0k%e9(E2<L0_E[tG7-Lks=p6R`uL?a#e*(oc@N8rZVdPo33V8d/iI)%A;]`6IZVMFRn=;'j_+dDhbp^.k)j7%77T:Cd$m5;U&edsABg%R:6`r]-!BeCO09iHTkE5`T'jL5LX'Lh4Ie,kVc4D^UTgt7Id\eqk!YCoG[/*!51\gs8Ff1Ztt&j!0UE+ZV`#uh^1,K1W'/K.QAJK%$!'X'dfe:D?p+A$m8*'nQjm'%.[ju&)]:gXO?(0Ui@Yt)(5P?0K+;lWKoQ<l%SZ^@F='qiqkGC_!rNcSjlb7hn9nR?"$M4BJ.=.R%R1f&A.-MoF7j7:&.^M9*pmpaYU6GlL&c@s?Y"8+'`6F?`K-16[H(lgPD`A[u9Lq=qi]IHpm7FGi%iIfn&Ys#L<abm1hM)qFaA+EH%5`b0k-[Q?_k(f!!FGC3;LO+IYBkQ+0^B<.,ApV)!fRI'dIgl73W8]B.q:Q=(aNu02f4Z+V5M6kjRnp-1;p7hZo2$TIJii'nZ=d!.%T>T4&*rkl`d'4I?r`7C#C059:Tr%b28cH,uI/YSPhX?^mD5L#'r"IJcX6+A,AREb'S%mJ,29iD,k&=O9B4ltUG1g%gB'=)uSWt(=%gSqT>bg>)t4"E,Z[`d5W1.,ullpe+.NXfOO;/JPmO-\id2=:FEVT'GYdBFA^m4/-c2t]MNgW#uukdRR=M8rF$r'M%hqQAkMd<k4A%\T;-h7m20u"8Vih[0tc\/tT=EGYRTCa*Z);DJf+';/`L^l4t/YD>1t$^9_$2\)7"Rh(J,eI"sp-(Dk1J/B,N@eUe4fDoP_]3k`R4%ZYMO$h_*?HOHTP+IjV(rfr&`f1.Y0>p$TT'j7^!!.:7+EH]HXaqF*_`fekkk_As#Q-cci:mG[pV3SOEt&"8.36!,>A:LW1!,o>(t%FN6-Z1oik=l1Qc4JQn-j+t(7;rK>](aS"K.*k'@hq0LQJbPBcOM<f6fQRk-mfn6q!/]U'M2&P$r3prYpB86&:Q2YH9?9E=8-ce2f%MtN`5-<0'P7N$Ou6$KdG?d@\(nee)IQ2<q;-DP.W1i_Wmc$:b5C,o&PXDddW40?#%@d^Snpj9>i'@b+.]BoVLLAi'$N=\NmWOoiG%Dg,T`:&q,i49n)&R/Y@Uajea8maFq?%Fa<Ee/?t+)nD:u4Ai2)E,P>b1>.*$".#X,%'(/Y/hJ_P=g5hRV9@]Ols&ie/;:.D`OF[+%FU;j6R7A`!k2ScZ[3u`c@\mB*<*1eejXXR_\I@oSrN"k)nUFM].<*DiP1V(,d6-kqlg1YI=$`s7=+smj\4jC@n'^1cIh]D'EhUZR%KM,--O!7XGXr:QqJl3an)(lRT6daj:i[H,X78[Sa;FGO3EW`I*kc$GDk:>UCbGK*kV8EJe.6rFk3IaS_"nH>!"!9+X.WCY!'.sA>%XKO*&&hoGh7RTfZ)s"#W26eW3`3O'6L8^#V!?+C\_IX=h6p/&V+k22a>ZIIAPi4A$6dW*S"9gD+<Ue9o.6K6hd&U!g<A0cPfM=ej%q[m<j@Jo\r)7g/]c2F[YF&bS/KtGL$bJ\QS5h#7ic<V@#<77qc-$r]i!VTG'"h^Mm)l3<.Mfo2G7)eI#s"_]-E0j<\ah%n3b$@X'%P0)fC(G2!RnTn2R`*J*/\\]pAYtOdC`P2c:*:daI:+lRe,T#9=?@f.LXr=k9E&I,/FXB8%j1Jd:beQ5MOss"26AGqi_OiSg'tC8_%e_mHs%C8>=%m(CN93K8;M,PC%7PF'2;S5R3a+:9pY/+,YL^1:NNWk858VLQ)<mfk]YQS@:<2sof.eQE/dXWAPX&;qI<9:,Hi'aX2%Udet(%".hKX4D8l.U6FWK))P\r6]7?eC]Fp+g5&acePKW?m(8JW=HF7!*iCe>$Zn11$dqIV-^:Ua:UND(cNXHJILb;2DjbLX=Xb]%2BLY.?<o3LP,hoS\>p0:-?:D>[IL<5^/"ZA`*Efqp(@`fE$1-Go%9d,0%I]DhA7ba7A`Z;1.,-2^C#r-G?%"3NOqNbohJB,qt)N7%WDZt\Y4P"g,)8Vp7DNQ3*#'0K3D*jZ&5%hY/!B$8_$[c56G=qH+ira*7o@kP4np3928*PI6X.5D0b6u['e^(``H+dG*eJ'?0mU^0%n;<"+MQ3i<3Ku!p$:n=!0u_UC+D9:on\e%NhE#njg#tDg7i,4YfA^ORjo%sG[G/.[CTZ(&F$$N'YA#rHMMqL?3aK8'%!m36F#"Zf%?jf(KXH`U1/&K[pml9^Kh8T7hEFfNB>BUO,%=b(srNrfm'(69R[dW89aoUS[4UWY4f5a>;`@7bf3OX#205B%Y$M&k;TAF\O@,NU^%f&p\D4ZlNCM8tq,3h4rqZh%UG-%*EGY=4=09H&2Hq#=o(nmBM%s1/BUb?N"uVg!#!Mhs=T[$.P@4ASn3RMB?8LfY6?IUWcQ7c42"%ZFd4Qh&'S8nLg(>/(>SFm^@l$^NKs'k':mX.`5-`,dB7UHSBJ<i0qu9/%$3S0H0;r]$N9*2=Yb%iHfV%K4/EFR^<P/[29H54:=<k%!"1NZ_2\hrMc3#><*/G(Uco,2T$m$cg`bn.9rOK7ZUpB-\K:mu)]r/em\o$K2lXPRGo`>QCOR;hAehF/h+@A]&mr5h\Nmgq"6,)3%S-mjk!&4]kb?h1$Vo?(!@*5@OOW.!I0KX<-kmpG4$mt'h240O9`At8kOukG.QYs/GVgSqVd!>#%#._\e;jlEMat9LG@Z$&8>>4X)%0o=$n0IkN#+nJ1BZ8B=.74QusCKOR&Ir4B,ghOGcs3c-#?.Xm`28?1qZ9^2^[VPTO*V-Mc2#89>IH/j<ECQ/CQJXDHDJ?*,Zpo[6%a6H\Pf.)]9C\!j-VnhBeD1HX6d8N;Nq_g,ge^2Vn%_8L8"+*"=T[2Thh'I34UPYJQ]jNPZT3<iDTOg,44;hSq)]qugC8JGHX[V*6%rptNCdDIV]^J\'kZK8E?-L('2^YR;5.5=>15>arm85Rp#A+f0fp"Z_+9i7DM'K9C&eCCS1h8.I,V-60BH.)8MaX_uWS)o.AmI7mF%0J_08_IqCc(/m)==r[:'["(<KdiC>F3E!$#iFX0V'<p`'LNB8Rg_CoUg4_2d/,*l*Nq?*9N:t0EfGLr>o<U3OPEh(73P"C:kN;Mj%,`=k.KtrVLA5]hI824s7DI_7pB_=s)j$ac&6$00b)4k3h_\A6Z\QHr@82*"$HCWZbbioPXkrniG2Ig60AJq#SjdCQ=h,;klf_mTF%gMW&$OOOs-:::)o$'=U'\LJ0GkoKP.^0)d-Rq:+18n?HcR&0tk]2tlp\k])?g]'nV5Ma;<11D^.0jd&2@[$r<I(gQg`cfD-;M5SD%aG?>WSP.)!B0M3?U@nO/**eQekOs8cGR/4CqIW7hcN,J)J2G;#F9eCG9(?"N%R\jBe^!]&_`=<nacV\O:YD5nEdoZ^G4)e/VJ5\(%%XK:Patm\V67;5&SXX8c:K$DO=bigN8a,E(M*)*8]b-S+"_00Wih!N@Kc<H02q-[40)Bj"p!SfqlpgbGP/g>[=+q?28<5hkmC?"&%3E4>,DV'%ACkoYB.RaJL/B*TMCHjfd1ip(E;r$(V;<nX:Nn(H*V-uGdDiU+jU$,k&Z*.X#CLRg;D^gn`T.cD<OP*V[fl*(">e[Qf%X5o6ERF]hcoL%b`>&o#jcEtm<,#Y7Oq5hlu'T]cKeVOOQDNN(p;2REi`I/?`U]m4Ys/.jOJMQ&/bg-#urCX3n%'$#O:H/+uj,MZd%D\IgZYpredh8-Rd-J'R%]S14]?/&!.;;AIIerH5/a!euRo=OXYJXGaD^YIF/p;AQjZepAH1t@&ZduNIag>_AP663XT2oVk4[76LX%.=2g):>pG95"(PBAgd:T)SO.#b@!_Kkbc_hh+VQpVg\:p`CqCZ\"q;Rh9KT#EILWonE9GRW+@42#&t$F\*h$iL_P!Q]E_j4[R$^'%oW/Q!]D)l<'PA$&bsmLi^(DPi--J56gu&I]r/re$)^1BP]Spc^R-/TFc)AtV7YoV9fEdV6%f&SMHm;%n&L)*;KQq]"6DVGObcWGk%7L1p\H?tHtaLk80T,Ss%[!YnemiC-gdCKE!+]?f5o+Upq73Uf++%Mc+9+:s3e8+Z#J6/1V6[?<Dq0)e%:[?=mZX9=)[oE/#T9r[9%3j+V*096(.=(Qh]S.tt,r:lGEX35W+ML/Rc36P_K3C$:D..+2@W8q.F!0mXc%T'V@;"[!`EWp2an]Af=bMan*V`P>`\b_Q.;[uS`%4Co"opb9bYc,O+sdL+V)meHS`@-'0ibm`#"ar-@Il[4HbXYW?[MJD_]2-SE+1gATlef.\Qmdr#G!6b'ss4P\hA,SI&fdG(N10?Wo%[XHlo:4>,@^WE?c>JjX5K.Aq4>Bjm45CFb@IH++)B$eHe2\PF3(T20s/Nn0%oL@`PF=3*Dr90,EW6P5^]ce012+]3R.f:'>n:(n]%_rhrn-sjei$Fcc*Va'&_.sfC0Ggk2c>ELkXD)9EUD_o..4&mm3Ra'PFDN<M3a?mI(PZ:tW2(k'JkDT9TO/I7Lr870.ouoR_F>7Lq%#1rLgF7VG/ZKRJR-G8QbD()U0U8OBj(Ul,A;mcCsg@:nq[ii94mgRMqm9p@gS;Y@&-5=`"U6aA>R#<9X3Y$J*k;@+*h!VNA@eP#;%jA0(C&^*:GH,C6;Rm$6l.t]^?=AGqc*jNp6QE2icl$WSX`%mBUjq5d>ZoO(J9#=ambq>&TB#<_m;9)6LV9G^!H'FJ1r*Qnm\3CXr%hs$Z%&)mM.$]i(rmYWEB#/^Ud]H<q2cT/q6_90,HVl-;@?$3beE-,%&p9=`Z^U>M"nYgpE2GD7G$?Kho`Nm'/HGa1j(R)3@ak]O0%iD.O&5FK-IEd,s]\ti0HEh?7t;p'M\+cC"#XDckL2:1(D2-;e!BC=Kg*S7QOCONh.k4YqF`#rmaCqBUghamJ5=o[emNeWbSqo$es%TCKpVR[.1dgOVT;3L`"Z>Oumb3lG9>ii7'()^K/t`G^&Qh]*)@J<i:\Buph[$lSVgT%sJ(TRT,:`%sB[]_^4Zl[bXm`q)'ZiYH]/%UomdFO5>,=ginnX/ooi<m^pPg(V/uYpKcPXhhC6mTY:f[O[34h\aL^uRS<.]LoEncGB"SFbkuB5ab&j?^p>cXd._Q^*ljnl^sB*K%if6.:GeMCg>JceRHmCqq'@ut(q6qMn<ZfFZELK/l8:EHmBZ]J$Q?qRoG*b"_1Yf;t'7J.$>*]n:b1ErRB_AI0AbkjOR9@^2,A:\U%Z.[@EbV*Q'YqkosXA&I3b`@u[-,;)I56"-qh"=TJ%aM2bqsuIhBuHQeX?$+KSG]YSr5%=E3[+=<C$eJWaR<F2mhWo=$IP&E.nFoj%3V5+c6gj4'^`MK#n([5OQo[1TGaHqIn'JbOd#WBC$-u4.gpNK[k&sR=#A)Bp&f"guYs(B6m51<@4LU`_K:JYGkB<j77#^TSCU#Fj%agF[5HJXD=R7d/e]'!q/Sq/9ImlZR%:3ZiIg_5cT'4O^"!QP%`!`FiGHNGs36-d_3c922XNu=COI`OYQf-!?H$-571j-;tnBP=6q%P&qMBT[oajDfO5FiC_5T7@[H^]@"*;N9kF4L$BI_^Nl/@o&d[Sk]4-i[/Nek0IP1nj)o&^q\:l9,0=QVK(a7l]:BX?]kOLB](gR.%pnQXM_p5JDadpO8%$9k\j.mQ#+m(>9Ye,_EGOOm_r90CCk`e;<RCdQ_8fBQ65<6\=-M!@!IUBEVIWNZY9qgm_))VdsqsJ$QYsc)W%IhKo3GYAT;rKE?GE&1:-Zb(8A6Q3p%X&f%=Sb6qpY00rh_o]TIE<G2qHOiR(%dYE4;hrTc,>(ggN:%l^+aJ8*&-[BsnYF4Tn$Y/E%-jb+C%@t.m@W&j*6PuHemtVr2C#c`?3q,JnP,=UN9Xe[iV4-PWc'6sV\]pAn9Y&E4gIrKiR?C:"]4j&I5I3Lc-<"r=Eg%s0\s"(-%DJh;A\^?W\9tAZ9)bi++*9nOuRaT\/o1%37359'(.bV.D3$#PIqlF_4=F]e6eT=;V:/A<_nn6O[=c:M=1MKUV\BiLXbFc;:=kUKF%-gkoL:@eu`^OK_.:&E'Q:orkr=]\B=X*([JUa3E^[5u34X(`Q^KAj"5YC!0`2nu7KeOsO25=a.%,P+j0J\u8`B#n7tq5#&pGA,OM%n67F2iYk!'B?F6C#"m/#qkS\4Vg0sUe[sJEDM[l@]^IQ9e2V,EBs`s5Es=/T]j@l,G0*s=;j^D/"?0YdjK/iC;?,-\fdXN]bak5Y%1J+54on8`?:K"r?nI@U-76,Wgjfaub_4$Hcn7E1O\JDk*$h'Cbd>:#AYElqu)HOS$B5%7XhH.s7mo2*X^@hMPDV%XYn;aEfTGm8,%R9kpr:Q]ED\]42e)G@6;r!=5N]U:d8)TuFV?I/>Rif#MWf<oNS_gO6uB>)Wd_`,R3i$Y)>^bn:Gh#()UaeDRg47f0sfb?Tge@iAO%R@C:d?;+he72Kl.FK=::SmU2c:@"L0"mq=dktLK?c0fW7^OJFSbAPjZbh'.:/dPTcb>P]n^6W==5r6-3c":;E9A+\EAb4qNc/6C'%NIJAA7%8h[^HM\\W9`ojgL9R/acq#6"\FP`?d)B'2a;.*+fq0*[W:IY?PL.'mMhoHp)!OjU8r[U/E9$.Q^gc@3gd3;BT=5&dXnQ`%cOcKRb\k[UEnpZ>ZjLAak2-Ikm#E*1E&Z\E4f8Mi/C3k.!R&Tn8S4"n\0fhO%G,(`-6>CaV$T;/O5So\/R%BR^q2EV1)p`gh`99L%n9RiPS`beoQ?sg^ZU7FVHH!GCB_cPVN`VP0.d^TOIc,a&Iqn]sSc3cA609PT.2A&[ogA&`Z/;C"c%VO']O+7pGJbNP(j0'[F+alH%]dOTdZ'<qHZoLol8^(Tl_aCDD>?_et8V'[#*ql`(i&&D]kh-j&GK"n_PNnB8"`W$urL*@"d)t.4/t71u]Y5LMW61.l='H@p%`j$)%hOiMgG9)C`oZ!#Ins1[Df=Pnnjq/l<83).dG5!*eEdGk`-!0H>:7&^mGhp8!#/.A+N8XF_H!s6PZ.sLulsceU)OqUfXKH\XpPZZ^%2@)8??BO*G>)q&lUM0+9*kJM\!l%7-o9e8_O,G;6$qMHQjUYF,Jn-##,gd[^rAKg:'Es'ca%N.rD#UBc-G<@G%hJ.ti'Cf5<S.3&%-%E^P>:b!SDGc'/*JVXN(_/MC%m$%?a7ae3ibh%1Bndt7+CRhT%?l5Q9N*\)M^jR8$D3KW/#jHXjh4Y"2A<e("b1@+Qg[39$'d13%'L.!XMJXKNh^=BOgP$BJ,oB)sHP]GIgl`e:e)b1'RIIdO3>>IfBKnd>,S=8(KMPmo08]`9iJSh7U4reJf+bkBb4pTr1dO'bCQhs8%<&k'*#@])!&49L[KY^VC"\k8d@rt!oAF(dG(No(39c$7I7$1*9A1Acu&CR+YEH2#H:u$F&*Em`c^b?oe?!LSSV"q3HRa_kZ!.lE1%BX2?N3r'sLJkWnW\nM;1O+4^KnRG)rZ`0`lZ6:GlWf!OE8?+4V.^m$dR5.'.=TtUdA%l37fT:C,OO8/M1c5@1R\6<IWi7F<:c)I@%$.>jUC%^uY[E36B7a_hK[)J?^@%#Hb(W@(&CggULA<^A1E#\Un>uL"8.!)o@)S2>!*E=lj6p]ENPI.-Z-mF?X"6KdO!#TCF-O^hc%_Y"?J_b:(Q[j3WSa?YFeoW^f\DU3@iiQrp0i8+c4YF%#R$!s*q8V((G)JTh8W$!(CC[ok;U`U$B,injA"7?+'U@c</COChA4<hg!%P'a0$`,l`AZ%\MS:rC*"<FeNS6XKu;LhJc*BaD!^o*&/7;:8mt_;?"*buUC&>I6L1-C@QUa&!3878m0Lp+,ISkSMGQ4uUOO$N:O#%'Y-Y*qNHhNKKOUFe+<\e(J*i)$6*"Ei0hPRBYrC=)lPr?Aci1[8TO.TfB%kT?oJ%GZSKG:$(6/2e_Ja>dd@T\f$Glt*3]-e_mIFu%GddtV*I(8tDbbCA!3>RE\Ge&Y5lMGp"UiB"gcGnaM\!FPj+"31?nKL0"2%0#MU!nI#,/foZuoag8T]7ZS)^q0m%bm)L_N&9e(_"V%8Z.KMCe];3#?YDR*8&0\U_:fBj151dp]"hu9_4W'*2ffd#6TEh#(C$bcI50grAXCK8(Llcd9+*5BJ=N]D\pNuD]Gni/C\$Hc%@I2%FuWh*]JrI;omN$ugkAll3;o9(ebGH._8,<BjrK@k:".Ijf8;*U[cL2cCmrt6'.MQA`c&1eU8ELd-Am+I[8O\XS;7ciF8RpH[OfN%%R!#E@-Ij[3fe4hlXk-'B^d9r5`9JU2%Rq`=FkbFI8?',eP\Q_u6dQ40p??P*h`4>g;%l78dpt]K+Q,c-nJ-8tD>t1fS8SdPH`t0:%E;Pu&ih8ZRI+iT,WQ_%Z^iSE$#T$t<o(<o)rA/d+l4825#$\Jl[2VmtpZB&K"9cEPHe,Y2K?h62N7ebh`\Gd+%6KoIs/#<RE6Pdr%/KnhArtnm6B:*EW@][%TMV`95T+lMQcn_u+]t-"!5G%c'nS%c4m(,87<@uFEl]msB(#b(2b*T@3VHQE5mTZmIoNnjW:[IdU[CXt6%EU?Ct]<NV!d#o#AJfAc)K\+l2QGu:?''m_u9S:fd[k5In4g`qoE7-Q*WT>g`;i^`l08c$,hJpa_bc3Y2h*,q-mt-Kus5'X5Slj:P%h&A?Vn&aI#b'c+U\[5&t^bB'ae3T2agAPIke0;O)Y?c8M[JN)qd<Y=f=1qXj,j8HbU"s)Tf5;&RIM'N&aJiCmb%Nf+?ErUdch"n\%h`_.)I1R8d9bn=o4"L)\Z9EP+V`YgK_ndl#=+!?R'=R!`r<PlE.PZa@#!LRRDVYQOG-=j8I6)gEp8iF!P4I$>>d1@]D\^HjTj-;"%9`eL#KGg4E/Ge1,]]cr/$[4EYT(Uo:O0WN#.L5?W(9RT*`3oI/,'fA\;$:4[+-ik%8B,1H$!K5:/[G&N*d#5kF#e9nA)\pmisJNq%nq8)r'A00?9kWC9E&M6;PA"!A%E-JFpg?tFlJpQc+Bt`Q2=fK`YqCTTM,du$.#'#'o4Q1=rSOh]Dg,S_FoiCYe7:pYg%lr'C3BQa%"p[iI`D8R=]/.#Lmb:RqOgfmo+Ts6M`P2H)8%iAabon:IYSb==7$UJkXN?Jc3+i>UF>R'X2mA!4MVZ[a#GZ9b)Bf*31#\R%pM=B2%fu6+`k7?c1#bf]n*eOq@8&Zsp_P(0bH^ukIn9XV4e3em-'ZnpkiiWeiPZQhTdVC=Kau@gt-oUIBD.bmd_0g>c?+W'5p>$+'!\/n(%SHIVlBapafTP1sP<?%%3ECpi'Cq;4A_62gDH%n\>3%WT!.AB]Q9)PHM(Zhd=aDq,!G\?a_pu1Z9][F=T=l!Ma#`W7]&TC&m$t4CA%FhDgD!-h)]_/nB1Ubc+Smt!/U=:W-VhLq;BN4iQtD`D/sWt9Ip^T(#RM(E+`<b"9+q4"!N35f,EmPKh:X*&u\gMIb90$/@GHl%-[%=)m#kb/K",2&o,0`rC3iHeF\i>[eclFBt5$27XQA;2O<>[(Nn\ON-nd'2[A*X<*D<?s^lQS>A3H*FTN=-0MOoX#T.sFIUWcpj<Yf%E8nf3p4uQ$Q8<8c)B@"Sk`?`Z5W@9a5!3BpGL($?:jV@-Y.<A^jWkZ#2q-`QX):N1oul4]=4MJa6#)fqjpjI)?_X@dXG&DlYl;VH%h#R&*/-JE8ghdYB/h5_h.En#KoMR+oV,FL]9"RtNh&B5R9W;R+/8:t\7TB+QP=Q&8%7uCa0JK=gS>dVS!Y\MTR",m5QH(\tjPi?2%K&=noN9R.J8X,=\e'ZSi#rSG;UN@0hHt#/4MWp@=^J1e0>dMsM4lAg63Cm#Pc_9fqO"Jf)&\M^e=Ms,qVqZBENp?dE^)a6h$fjFr%gMZ2h8Bn[!SWJ^Kc6ZRM%n7qEY(KLR`_#5C'ZKf.H_,!%_,Q'-d?QnY)6YGYZqe+)CM]PRifaT?AlX*#S[nqjFfGZOEGKeY'6]F<%V'd'Gc!St_=mcpdiL[IlZBU2o>Wi=WgjVDtA9P8WBX-p-6.#eJ)d&RnX#ud^oB(+"6e7RXDqj[LiE'90m1)Lm7G]*Q\q-oUf]a$`%JG2<SM"dQXog%bcliU?AR8'&b6V0^#bGWue@9"1>Ggql!W$AWHG\_lk7nf2JkJ>g64W(i$6nHp`%QoAYjW/K*<-SX>\85]90:Zb5%=SD.s`scCD;IJ.7`<(6H:&f`&Gg]]kQoJZ`;R*oe%[fmCeuH!\LsbpTemFeHVtcu7cf?-@*kXn4Q,!F7o%cGX&WnUlU0:$sqI"pK%#I`CM!A9\EjZ3liBZ)Y8/ipZZkhh;s.l,924#Zp@#YE6'Ho*om9WG@i2ih[k7tNOCgHF6TT";nVQq_8O`D8Age/C>7I`1bFA&HqE%LCg>DM)Z>5V)HSU8Er-YI'1QXYm'RJ.BL5V-.oq,2miq)G#FoRP:L.%lgnGdn$,S>'R@>X4Tu1)QNuVL5&PS4DGK7R%pOMQ9Oo.r%3FM0N@N;tm7-Q+45:Co:N0K[smI<FM`Y"k/]6NnI=R1T.g7L'l0R8uiY43-.OiEj6Ph9"n/(Zj^3?b^7gK7er0&d80NY?8VcoLE4%p:`A#:7lbmO:ip*(E&`B1'NNN8S<9^ooahQe-k<%Fo%q-k&?d-d;lkGeO+HC:MCO(A89-kH(8_,DnfRuq]4%6XDpaDPjoI=Q#jG7%5L5ZRJW"2$j,of#;U7s68"@W[D:05SM-T*]:d;-O^43'4ER<u2X^@:4#N]ZB#Lc-pn-hC0+ud&]cqBDL95XuqDi3npZce8ih*p5d%1lOl+!W&.[%9LD8TfADB;cmIQ%m*-:>=t%sMe'm9i/R"p(iJ?P4@'Km!`,lcp(CJH_=,/hS\Wh>*[sf5'Rc>r<dug"f7Fn@bU'D3%+m,I;NA!ufjjjrZ,57qa^DMXC8AQ8s@`c9Q(iaWZZo]hHSa#W5H$]EfGK_cQAK-S'r7NI<p!Eahb(:eA]f7F2FAPJsb0m]DX<H=d%2h;8e3jRFVlDR!4=AcZYo5_bbnKiE[M[)#q)k:-*@G=^a$(:-'L-3$i)s`mDgqm<B*30%j.tqHiZ4L(cE:s*jO;\G\`GqJ<3@F<A%/)HAsG,FcVd+3;6=N%'PM/adkA>N%/FF1,=W'V=*;gOrfZq$=&(17u(+i0cf&bIG]Jd!+8@_1Cs<mr1:fcXOtUMaki:ng(DdHhCA%Gc:tLea<2P';f^p)$I'7:2O/Slu,p^>P5!CR[UZ9Q,H7+eg9NtS:VR/qS7_!'8sV#.,EcZd^o?6:!F"^h;NXBGt\sqQl2'o*:P:A%$J=LoA$)k0k+dK5F'Bom)/B\JrIg\(*"(J"8'#<"C88LG[(:*-P!:OA:D5V5j\bHp6tBXk1f:b.l3E`b.%2WrXB@IhY^f'h)@ZQb%!<1ht5I5#c\4jX)!UNSR(=r?5:Bj]'Y(sNP''8#O23-^&fFus.m/<CMZV-qWI+;X+i7MVW:NZZ<[QSHB3k15CQIdmlQ;A.,$hJo+%DA:,C+ns`B9a9Tc=S&,O]BA*6jEB:RW&o;.XeC/f5.Wl@=rfgGRT,8]TI0jO2F4p-9aqcZfqU0k*LP]=r"f3e/Ok?^<O-Y>@!f'*%n_50%4oBoqRr93npC[]%:Ubi$A;Xq\hYID%kI1;7S`#4mq.o\3fV,2@FFRCd!kpSA9;.i-TH2b!h)`B0n_<!+hmp[k52pr69!#J]%Vq?"$DD5ou%&\L4r]@eo,3u/Z)5kJ,$7Y^?c(IQpjp^%C:@XuYVG.&/SAi^&Gl9<;BZ:TJ5%V=MQns_XXZ#*akHs9QgTsV7rTV>L%Udf[J58PM8EI)nX4%2Z*Ot\4ek9-fGh`XocL?^R+Yea,:@FP'apBOc6T0lthSR0FZ,`(#,9nu'ld#m1^s)`eN0pBt#'I-Nb^t:5_%'8HGW4_iGI9%#]XV/j">W$J<n'@sJ9+IuoFVVZe_Xk[<W:;juU,:@'-e&Dh]$=YULo_Z_iD<Ycb*f'8;#6s@Q*6)@`6NO(J/E_o+%*PmhUe`tP1_4>6r1Thl3L7h8IIBO=(#q_>-VOa0V6C)uE*_BBB6-JTe&f?8;;IRkaBl+O:TKA-ueu@,h@Nr*((<4LZIIaONs7H0^%n/V:t#T@Fi9ZNkDr[JEUr>7cFm;?o/[rGO+,50Mr@LRT.!XESi)W3c)gbY23[\K21mZ\kD@6g!0ZMimFMEMfY7@:59m<9`Wc1B0E%FGl\B8QOnAaO;=IbL1U.lG]HTq6]KtLMVXJMN1,grPF<mTPMW?*s@8u*]S#qY/qT=lNDL\EbT5AG/,(L\u1*9SO%8F]ti)299YVX%?V,),41td?3n/;Of5QV+!34-]%E^@SOOLk`+W5N\:?Fa1jqqa;)qNB<WP7o$\f4cN5c$MLPsL:?LfQRN&R%AsDJ^8+%1LWB*bMsU%]\%Z-BkdP0fqUFjrR5WZiU1_tUVD)"^3\AD\)"RgFR`59A!I6/['q^SgATQ]\!t]fPS^CFc]<6-qP0A5W(T4lJuC*l"^t7)?9<K`%4P3d5>'dKZrj4W:(qc#4$4@egc$Ol2BmWrBHhjPLZ*)^ae]tMaX]h^rk\R?!B);[pVq2gpX89l]@I<rYMXkc_C&-1o%a%u\_t0_f%gAOmDVE?i<I!6VP'c(P^_Y-Q;Ae0"T<.FZ)e*$:1[Ie?WTfh5tQ]:Zr`g;\860WEhp2j`m=PR_b()BGN286n!<'1&!UfX&qkPa[[%ja:/nf0>.dk4nYSee4H:2V)4t3hlG#aFid0Z`c!/HhaAEe_[l==Z3uY-m("tmnt%[>O>9r_>M$We>g"-2iH4-j`kXU]HBFDWk<fW%D/#dAk\[)0O.JI`[se:(Xjs^0n69P)IbHo^-&]WtV>!%^^9)RmDRV.A_M^q-rM@i8EqA5J&![+a`nL-s>ZfA(hL4'*G?^+\Q_*TG%Xlu+DT657(AT0,cqlMGil!dY'3OW\WK6P[YqBK3/P(iUEVn->'s,&na(71ZI'h@/nUc%qo>hGumXku@C5;gsloZPf5mJ_1?l@*#B%J(O\,.\5Ap6F)$r?%<8Ff:Ld<0);:`BlCT8:<tF,O0rP;BYJ7@"nBe7S_At/rigB\l!kf.dI>.WOpb\I/-mX'CanHBddtJipMKl-%ree!_T@Ud)bbPct((B$n_UA&=oqt^T`S!%#T;-&bC[LSo^QP1!!^hFK("Ff<Qn$iaJ1lHRio7:mA?lq:;t!_$a/#[8gg2D_8*tZ(%Hs$9[<'+B2oqQD-Nuh9-PIGJS]nQ3!bIc<I?L@BXo4-h$QdrFZ6:L]hGYB(JUXoEH58KUB<L!7>h+$f/d;cSc?!CGn]j*O4<)9-B%d"'HWl2#k`%E^I:IU'T:ml$fNC=F<6?dZ=P)k)e8kl"qnoOd@,46m-Rcu[I92V&@ns-+&'LSOC>79Z!m#JVM?p[@o\*PfnPXUY^H%ooJKo1[3ZjMji#f]HNI^Yl8LQ;1m9djQTR]28;WX.bq=Wa8-fB8'[%a_2,H2e:hh=mH/$VGZuF<AppYfp8tTEqPmL1edju;NuraT%Vh0Sk6Q>E^G%:&NmrA#*gV9[?2+rp:Ur!90i$-#XeCurL2dfNh5(orlIp>,uY7L95f%^//r_Y_6p;,TYk?TM)Il?W9:J]3E/ho$G%=4P/Sq/E7F":4VSXAt]20&iZQS/gGK#Q5>`9jJC-9k@sbj:(c$O8#0P7SWh0/Nr"h[Tlo?l34S1SMoaj<Ng)Z]C-$`Pf/pWSruEU%/)PYK.c6$KbDObskEZY)h`lWB?7iDjHM+3(CT6iC=oVIX5<XK!ahBm=BM6TkMO'<=ViP/!+K]uc;6^&frC\6LTn$3O%ct^MfsCDY%nD@t.b5"p1m6YS"k'L4e5Q'RZhjrkOJnVte!2Thmh/-T6Ej=9_1tFV)71S':mQ[uO2M&8h")Can):]OqrAY-bR`JbOabrOb%)fI_%`pOf'QI`JKVh!F%qeAP>3M4G!hmTTB?*jHGA,TuH">&He!=CY*<lC&oj7:%M:^QP&B#$,D>]01<Wt/o_nagh`_to;IC00:W4^/Ur%^:l2B&+;Z[j-[!,S(6X*IX<\`Di2jDqdfARpiNe;K$g.p.1-F`-_]Ol'njFR8P&j1%[tfb]_dYbp'[fCX[4foY:hhVFh+q6*ImG+%O_((;j.E`r!Y_bh9Ws(rBIR%i3/\4mr,\05NNf'4HUK,[h(fS<YX#3[.uZgZHS9RQOg[_7$VDRF7%;763Edj,PN@#HQ,6F_1i%?.%<9$EoP_>T`7pE6F[e>G5_#\7G<m#`al_+!i*>R&2=6PH22gD1G1tYnrhP;'cS\iYAN79?PP@V[*hMdS*,IT5NPIlL*9YRbOBqaKM%l*(0KT/85K%LZfbZ<@E!-+:)"%2d4INV/7]Q-:5_3M$Cs7crO:7ZGVkepu([MaaX;g13(2`J^rW<E:jqducs'F"lof,R;!tlIG(6%W$Uf_''5L[ZGn0FA)KWX.CnE^I?O!a9g*p;O<u?W894FD=<%=(Wj/N`gG#F/_WDCu9-WE1Ar)LlaZ%rO=:HH:rq[I4rLT5ahnA;5%2BLP,T]r(@r.8@C]<G>-2&kFr5--[14Xn2sL@m>"eUI;pBJ-]NNMHAhc`3P>`tE#PM'c=?Y:A6N:n\rFiKT>>mEs?-^:0bWW[FIW%`#1bOK(A8<D7fi/>K$$I$7ukW+0E>V?u(0q%kZ/FrJc#^(+Zf$e,3*G+DY&S'Rf@YZVaa^<o2D6/p?]M?[XotL@/6;[JlY^#93!P%qEMCTV>G#KfE8_u%F\\o7m/l<%TcENCA*j;PLS-dl$fCIr:o,/XhiSd_]S!RXiI'o(\5]T[="=4hd8J9FA$(8WIsVfKkcLsTf*]&%,)Z!"W6L$MLuM+.jr"QdbKi&H]6ONK`V)`q/qO[[TUCrc\dnuCr4WVWU1mDj;>e(S-s;U`FpbMV%<f4[<>t2rcR!1+Q)7bdC$dCo%9%VsLZ!X1_rap,Rdb4Ls&[q!iWjL?_oZsH"VID#Bn`[U/oWbk5(S4Zpg9TYkWHP`Jp]VZ\Dr`!Xq:3mi#;CRlIK[nr=Rc1FCLma?%h[m_--gaC2IJJGQH#IYBK%R]C7_*-;ftHkI#&2DYB?S*o#YYDhQ"*8e-g50]dEXoZG!]TpYAR"VMihgAQZZ*)SO#cHSM#Bnn@ZO/%&m86tKJ>.&_P__7BRLW(0<CMg\$[T1G[FQi?TJ8Jl8A[GC%LUdhcP6uiLeBO5NhcCn#rJZ^C+Q<@'feP`n7W3[.3j]8LMU.#:lF<%/WM*go();/.D<P%]A]"N06%:R_q&:,UYe:cX/t_/]cake#qslDTs4^.QuHe@[lhFAkQ;7[?KG`e)-$h0l.Z4pG/'7A2a;^BRqo3n%fo8A\8#]G\XRj=W[]o`$T/C<LdaHjklF@t#>Zce4qbNP`=9sXleA!2U]XV<3s*S`"%(kQ[:u8$MQ&D1ZYk[oeQ#IgmX^"ECmKGPj%\jn>9WFk%7o=Er6'sZK'pZW8TC?8/aG]6ul[k<+l,e[W8n!f<Vf@0Sk7et:E!;tuK768^?Xo-O5kP*^G@P+eMm!gWtc8'D1H"1Z<%`0<]_e!n,2bYlaCQcinCKGI4P^S]J!:XdNo?4`L;RhlGj9Ro(fY_kF[NXY3m.jpc13Y2"B[Sl?hcTbE<SngFF`j6+Yq&d=5nQ;C_%\0PC7Z[3WU?F4O`)]t'^`_#WXRee]J%UiP2IAi^&m]!QVT5F<-_UbX0FlqAVYARPl-/Wq:>(E=WQX2lQXAJT.pF8]e5<gV><d,'h%V>^,Y`p2lJ:9\12j,U]K+26N[?e3!!5LlC;4/9*li]INh(si4PXRk99+n6+/mp"V3[ubfle#>ITMMkdZq-37:.sJ,lm@p>*3hbrl%[TZ=BJ9E>e\q!l[e*>V3@i6if`IEi![GJt#abk$A^HQfJ$`gJWeiNJf_hUInM@<Wa4rK+d*um+tmm#TG*:K/Jkb^P#(]J70!rC7@%#Mhs)+htTlEV)1_7(L.Cd@beQQQp?qEML9bNll:3e4qO;X*--okc/=OHeirE@;cG*PLsJ+RS1t5]l)HUQfcbiA>nDF+tOB<O'moP%m&V_2>E@'2cL%gmr%)[P0(e&`4d_N%Y8]\UiYoUpI)!CCYG=Uf(?,EZH1eQBlIAk2/a^U$RP`%D*%Wq,046F#IG4[*DnUCoem<4L%4#$CE^,IqSgWf2?O!2aB.&qIiH(]H3E4$02<-h?8A&F4#XIO4A4+1>L:@@Z+TpO<XjqmtNXC>c6jd3*RNp:c"dA^7@Y79`5q9@X@%!iH0JSS0Y,[Kh-r0%3F^$_*cLbMCFP<nJK_ZbgjW%(]>`_`[s(G$ks7G09];)aASlgQQFWPh5&]ZMo-O]!6SRUSApQZ<]XF]443'%;D3JueAp:`Eqe[Z+0b1:2d-<$YWRE4a^2EsmOO[ccd/:^nmX+uJ8"]W!?(71%F'=j^@GmPeHu]-h5?$%SH:&$nD0"\NV2JJfB'Il%YL`"eO&Ts/b<&f3*Y33I/2K9&VL3[(;([8XK3ugBNS<6L'N`H8l%Zftp_"pug3IdD9WT\$#Oo9OWdP)26@DR;(=1<ZNWMn'F]^e.%LO6`soWlBtIIp3a'k2Yh?[AH;o#`uj>4*D4^2CT10H>hElSjdnltq7M_GqF==C,ZHC-bcsL#$O)f0]:@po.1RIJD5FeGe/6M8ZLK%?h_iU`f#Spf2c;\+Qpka7^Z\h5um;0k]Q!9h>6hZOmgZJ`i+'(s76IL4r.AqQM,R:/3Mh(N"">rqlSAJD=>,c%p8[K)92<H9eq.0%=\4h[Qs$%&:_g&(rq._]]f?5Oo)6&Op+ojOJ)*9`;EI&.Q@`r)?e16E&E=B=K%4]kmKKHhB)m8JQfm']Zb5V4HKK#9GT45i]+:oR%rNNAmqe+lupmnENnEl_p=P/N*0?WkT8ZfY_h5Sq#:62$dPlaY%U:CYIM=@D!3nc9^F%dE5rCEI$TZB6A+1FRMs"nm?@NSQbg\4Hs%$)ORB8%XtkGlCaCQdlnMc,SbD9p;oRVT`"gfR*QPC#D2[7HU(9Dcn1LC?O7X"%7H8ie(7SpF[<S'2ThVbI+H(e:1LK:<d,FqG2D*%bt"-STG:IMpdNL[?\3<;oY<7/]K"umo"dodZr(n_MBG'g.pPe/(PMYOU\9(X=,e'dg_f(;D92V==o%Q+iJ?f1Z<#BmDni'tq.,00%+q0`rn'/lBnG[-p.0WW@lO,-FL?[l>OSWN!LAR%SR'L^VDuo@%494U@I*q`S^,G:)bN6haJG-Y-ILij?!kWKQ:3#dorr-s@FM7Cc%WI0I\%7P@UF>k"NFt$<E>-ED.k3eB0*_17'l/7]J5#%PkA.%?rEQE_5(qK=.?cD7(I5pNF`'P'E_$C2X:Zua'HF[_!'rP#T.c8#0%D:H#JDhb[e`Pi&,rN2''LKdfSlr[fF4K/i5DVanWhB!7\'".8]h_2iFi"5$Q\*Cr?"2O<]Df;_l:nC"g*4Hj:etpGTn+LGYBsf2i%$X1uiXL?lc_q!@G:I^=^?_pClk[2C[`\6j#d<8V'/j>toYR!5E]<;ZN%A,M<S^L-/'KS3hK.$N\f;/SD&4VGAr4"6ZHmi#uH1]08%`M6KbARfd8UcSeS&$>9rVUL5G^M(+:P+`BW_6j^M7J.r:V15-mli1e&^QH:JYZ_!]7@=5hIL_*:mjSI<hSD/_iW7U$O?D"!+/7F:%/.bSDq2ZoX[8thhW'0CHZrVC:jA.H[+#:aia!V'c%$Nl12?W;oe.9=Mn"Z!L'BuRe:&?(B5T?nUh^EIe/4b*uQ_'K.D%2f?nkndJ%q/QMrGIYJ7o-hfMUG):O9nu_IGk)BQNLk!:gns3Bf@aM#kIBrh[iV5/p)-o*&,.Rj[7B-?+'U*7@rc\U)Hbk2fD"u8KX(d!mF>Y*%alCW_U9t5M]eQs-Y<H4Og@"%8]ao2Eq9.%#j!V$tbEB7'HW[Iu9BCTB?.IiLGk$3VUp5ruMR+iTDLODPhj4#mju:Kp9(D$n;uJ&N%4R8Mg=33CZ_oC]%[B@4!CTkP7Hi#Yd7Ff2LC>;<dm0iR'4aQW0iUIo=9$Q)R<o<8n^3hS6,4*>;k4^VuR#eY0nbcmEhV,%%b+%r(%XeH68R][b+g=-arGb^tmL%Rt/f'"2P-S!"GYUmD6n%\[G+'-XD;;Q`oj9R]oFC=l+)FhkZ\K%CC;X$Cq]B.L1I\6l?I!o"5e4tg0%4#W"\NO;j"6PsK4haa%2kLpm%13XXt$4E=2NL--SmT*Wdld'q""(\(uk>V,M(a*=uA.u=2=nWid`0Z<;oVoY&ZI'B@NOlCp1@ViU%5989L)N0CF(A4HJi<M+U!</<L"QI6Qnt^p6XD(2$(LgP8[qT-8MYM^6"_b.M\n+NO.2?]p<T<>EgR<Teot_s)&7-AW.r,T0Tl9:H%]_>Mf4^QuJg%kP57E'IT)(=qM7eOrgV]a6RAZ5C5&IeB>V$0_]5J\ud=605'OpS^BjZC]/hItriMoY;cml>aQ9u;NiMS!C$iLj9t%LN&"id#($0Kb&!FRtYuJ3:\Ya&U/J;YYUI#Z,7sU?-3pG!/f*2HqQ-\]oG4Jf!Dr2gkh!MO,V'F#OHOcSADGZ$Jl1&^Xpoo)moI>%r?(!r"h2&Z7=8StpR!(Q'U\Qs]ea\`SXs>X_h[^M#9Bd0[IuZ]fa]k7W?%1n,YV\fJ#$u&`I5,6<k!5>p@mA#,c6F"4_o;6`&"XD%\?eE=K\D_4kJ5(hQ-oQQjfP8Ud*nQT6,fP@c?/baGcVF.2g0u65.lD!0?3Ot^&46[_GLlXGA,I7Ba[Ac/;fTfPZ/Cs:m'Ho.4c*<%4AN69/Wc`XLQPO2`7WPpBJTRG[qU6Y3WhKS29J^=^-^AZ\2V7:h5\:.VK*]0>]d=Z`us&>p6m-!?P&*+I)YnWs+U.@MJmmk[\-4a%A`&)Ia9$eO[\U_M^9Uq/nH[rW9jWN:e#Ut574:c_:qS>1.iSB?UgH"M(%2Cbkj?jo7SPp1F`FJZYN9m$\*7"ceQ!Fu6`YRrfW2&Q%\)4Ujpit`^WYF,Z*6Yp3[6(/"lDf%HA9&"RGeagETOipnPOX6MAXUC\d>ih=6eM0jk(iCVrn6f`^n4VEH'Yn$Y#7jMC4^_B)4E$M%P0M"E5i5p#HXW4dHd%3g9UFkY/=BgY`-@-'M'M.ogsK+6ShbaW%QuBaiRmF=n8*n>,7>$O)mXSqg$i81K6%EsfsCP+V179..#UW5%\25k@DVMGnTm'=g=N7$%KUqG>/4dhDnJ'1d'qU?kJd5?kh>tHY't%SNVG`Y$Yp>//TZiRu9=dVj%>%PM'9FOG1eal!*fX$K]F_rG%<Lq;BYS9aW</q1)0eK*p-$V80eu)s1Ak[ZL'OWV;=ees8^d8Hl,H3"%RF(j?4W6oWe!,C$j[P+]ph%nW(!A:V@188(D=U#?1kT^1%9\YNJO-Cgq.Ta&-@4@qlaWh2!Nl``tbEEMA^(hf61F>UqN[+hJbG%>',>+J"ZD>q@&gr&ljB@]lDoUm1Mir3XHs&<u;$n\9XQWW2%KbL'jAZe<jnn)-uZm\r:,Z"r('W(>/BdO^tPj%;q'32b@0mPQ-:Kj"&\!:jZ>3XgmOA1:b=A&4,onaUEWgLF:QR=B-i9#qA82;X:%jMXqaR9%,a._piEf;^*A1G2I$PU(3bV+<A08WplGV8s"C!%%KP1*Y>M,^D0u:Kj"([?[J"UfNYsMkuR;5\Y\E*_k_LPU(.dj[]cB%q3KHN=so"?8iOfkVF3XMT.';JMTM?-H.&Dm:3sfU0hbauPoHd(5l*n.U!9M*+A3>+j)Uq!nIV_[Mi4h_SJ+W7-`NS!d4`Thnn:[Z%2rjJ)7I`XCateMnal(*8'nm''M2/WlaL*HghMfXA(<,=5WiDjqZG;BpBk1,a4OEmlM2,E#]G[%`.8&_W<Rl5to#VLtQ=5j^a?7s,%,*0G`Gr%'K=qm$tWbIVB:mO,H1f9pRih;AEH2Ju1RrN^_;,?'.)@tL$:5L(t['Bu'"=[..Bb]us-G`d:csR($1h2rK8T^XJbE#[3%<uC.2fi0@I/L@(c3<Dp-_#tmuQP.Ys;Sr77;C#O".\[J(L!bKM6rT5!B(2W"1p3'>IXW`?-:gQodeH]A)HVe)bE='--!aDrRN]SI%Lo8>q%EadVEE];G,)md:EWg)UEP.Nd(??=.NMEbcW0j"5V.f^M.02$A0h<6Rj%IdpXb3(q\3(`_aAJ"4`Nf>3.;#r0:cB>[LSG#5%RPCp(QCk(E7@T&\B/0A2&VEcfjKZX";,YUTJFu%%-ojbG/pT!&<0S@Y&4@gV,]H.(=#m-Pa7JrQ1BhB_TG(WL?XeaYWEOu-jGAc8%&X@(K+F0n6=?sobnqj'7?qh]g23o()%i#6Uk]frg0iXAia5e.3%$HC'1;oQS$o+V-_i2\pSgXe3GtWuk&p5mY^pl%3-<8Fn35`*M%:K(rA2n>_=,aS!X+Gpfnj,<D@HkDMqQ<t%L8BDSi)<40\1qj5u)p9mh'VsfI:mCJo'P4o_<>s%6L(pHEMU7%H+uE`@#gF4009.<r%'VT=&7HiHM&]T(Q`fPe:rjWS<PEnmK6U;?D'i4AHE"iA0"sdql+=TiPe<mMRYS\Vm0Z'bDTc(3;F=U1Q_p=rPK'ZVqNtfj\b?cOb%7^NGe]`?b4<AmtYN5Q&/'!_SUH$KQa\u9q4JR8E0-PDKHOIN4E,)I9GXGA9Yjj'Y-(J(?`oLNjBL1lU6&C:JEK!]MSDHVKb)_XXA%a%H_P6&n7b3#YkU)/YbaJh\m;0eTgnhT02P@0(\]>qQN]\01XX]_Zm5NTGitB[J0;/?%T\W8llPj6\aj(D`[&pU31:Lcd;m1>ZbU%H!paEGXkEeJk4q]b2]T^Q5?)M=p\[qS:2X(8sn*:8:_\q'#p#X]cuAj`sN*:!_*N]#F7&u`+p$F)!DS`[m1[9,[DJ7/V_40&<%H>%&1fb-*%SfYa)[(_Kf+XpnW>?]L,OsJO,NIf$EsdMb<69Jl)G$_.sqpc6,E>bC2+(g'MXp)&OUN;5f.U$:\7s<U*ul>_Z8XuOZY:e%<l2b("(IH=C7oRi,'E;KWT.Ysi]Ij/E>8S?2FG`aEKd,:0ITSg.VY:WaiQ=%Bp(G]TGrg4M5ZU'ihS!]>m\g(r<4KQ'GNu)<.eUF%iD#'[KDPp2;jPKg!`:ZUC$_&#)VEB1/cl:Z)X0(2-N^Rm3dREG@Zr$O!d_;,O:=c&9B;9!^kTY%P[NUpJSi,O9iGK6c3CKZC.VLg%^B3%WW3D\_&rQn?,[%t>;OSj<&ji(&aJqih2YNcY)>'80!q`F!?cf<5?&Z?od_W:$LeWo.To[8*Mu(P*M-TTkc4J::*`BorcDJLI%/7iJ[P_B#f6d[[kB*q*.jhCi@E#"L0<?oR28<SR31]r;%ehgAQ?NdSO`L&;e@)Is?U*55AbpPD:7(!/tYT1ZeGToeP"'Z7O3O&H7%Yi0JM^HtQq]h;C;goOiq6lBuuDIka0h&mas_fMVn(8n0t9H6,;,h!=l1asP.Pc0G%)A!4scib"Q8kIMh/OBMSdk%p7@A9deR\(ZH%)OaRb9CQ>OQc(,V68EmULCuHN$uIUOOCVX`\Is,o&]DkQ&W+S(K]lDf."O7k=R3AtN7kDjrh\`##2)h.ag3N6\'$/["Tm'PQO)BQ%8E]"k@":A]Ge=)ocRQLgF!F7XW2sr,klU@?9!SKH+:WSA>)4kR'3kj\dq=/qiUdr'\>Y".MEiboA2g\_*_hf/i^`W,>Z501eg"k2%Q4-3D_J$*HT>HDW\V^uA0ne[=m]R9Qidl4mVC9g3'J0EUWiI[,T4[;];<5%od$T[+6TGf>%-=4b)&&_!.tYf^P[k3G;<0G_pM.^*%i2[r;]:6f\=dQFOjY6L0D3Aa\'RHJE2.Lpc7_0TkLNt!J`\h7Og*X<RQD`",-Ep_ZE17]cRNk)LF92.*UG=IcU1m6\X6@/2F:C*L%`-0T@A<UK5L<k(B=r>G*FMIB7LD$:@9chN#CgnQ`^@EPHRI`hDRI`hH2[:W_6k1L$i&m*hK6&/mJgj4>qJk=UCa):7#,[g/)',f3%^bgnV?ET\$BJ,sYDc.Du=3Wn``18$JY"T?bjf8.6Ume49iUhK%148$'N.f>9>0*CRJA*M4&`7RZOepA%agjW]%fOL)qFK\(Z)Ki^%2@"dgh'`Su*/-82(rA/d/4llA$ogm$94Z.c@*=*Q#IZ`kFq]E^*m%N/asVoFANl6_=b-_;74=U<aC0E3Lq4^ac!>ib5qkZG1*76V%5s/$n:?E3WEO$]Ao8a)E"=,HgaLCGmlpQZ:AjHI!qI=B/)rl42ln3t5AchJW(=-6QN5orSTAm,G`N_BVo7C6RGQK^ELn^U?T+@,/%IS,2-$BlXWK"fE`aZ(td@dlq6":cY:NF>OHEj#`ia\e3U-qBE?T\QRc.tXsR\F&i@=WSp%$Xp=YYriP\ALpLjnhBjT.3?Z8&1[`:%(?o;^.o0T"3D];?npn`Ek+D\YaFPHRRKk$XB[1'h+f.@loab12;6,94jY7MU.j-N=U2?7_j`usS:'A[Z`Vf-.aT1:!cpC%'kFT9c%?(V^u4HZ5;W<Sr(9HHh8P3;8ogmstdSXe+UE?jm^d/]8j-L.FQSF$)/fADROM<MJ]!LY4;N>.'IRfY)R,;qnW4B:&'0T7<=-*lSl%YiWZd'%eH]6ZFj_C_I>Qal?p`L24-9aV:SI)57m91'R#;4G0%6*D2PRM8L]-,3L$m8PpcY6IJk4,UP0?"A'"d5E@4Z6rf>+Hk@DP%ntLB)<_-nbkYS"4cP>r+'q?+1W!Gl`7.KhX6mAuO+o7I670H<rD84jQcXUOm_)H%6R[e=jat9"AZ[d:<P%Q(AVFW"-j-@ta8lQ6K%MWaKbcpCh]Plq8V%t]'$@Xp.(8#LL1&1/<aaKkDnLp]^7.j2W;-3k(D9O]'eV%P32E[\1$Ef('.!2FdZOR+qNOk>L%K:7'3nF[=$%>okN>@q@H*3G:,C`-/`"=P7LmT#]!Z'.]9b#aStV9&UL[(+V1c/0j[;:$/ibT#=TLT#an&JB7@p<W^2!5S+FL"-GSta&&)#L;9=t%]/5^)+Wtcn3DX1S3D];4()4Sg@''$Abrh&Q>p3CK)7aLRX6,*TLmElD5t(0nCmK2!He0A9O&\mbLeXJ>.^4TQpU:=J@u3MBgo6f*%PuB`/;`Z4BjtKqYrpTJbBR-g5X2-QC6&LEc*tZ?"jqC+lVW_EABMo\aie]43Nb^YXjg^Vsb-(K,1:1%K5_b>?8W\N9rFa8`JO;A2%[-B!3W2?5B.>Ff*7k]0Fdh#MkmLkspP4/jO]a'D,(`oXk'%eH*:R%PubpCA"#u"@XM[2kF,lVij5*:Zf7#50oJg+=ia4`/T`q)1C%m*Co1dWId00XEJt$\7E[GZNg7pfs%uaC-X?LUkcY+2W&GkY!j%=H613aX.0IeW@-D#nW=AQcOu[BsRY!,(QepqSt8;+p(;IU@<EQ%KF[%QLiKm1E:0",_n#%-IRA(71698^=#[ks^&c*QQUf3h8D23_Q&-=cc<-lY2Di`)A_Dp)ag)sWF.KfnoIu_D*(pr5*mA`2,RHq2%J`THs2s6#k3=gp>FUj::L`D5fTm7b;LZTGpP&r"Eg5kS"+Y+^F3AAuG`o^[^#DPgWm;gH6O-<im:,[CFb>n/K:GonDUDNG8`.FtC%%k7+,TgQt5"*AFu#bOU&9+7!HroDk,SC4%"WC+fBZXc\noZ,bX5ZoE9AIOu[P+q8O(ta4F(te=XMkUmd[TF_HSc`1,CcS`]Og:H9%I?@#TG3GVq%%Y,r'=kGGJ>>hQkSt=rqob]G5"J,^c(A/N/G"^U7/)GA,!9,k7I`pBo+ugakkrCB0fsV1."WfY;*q1(q*Kj3m0Y<Z%'Z$5GXSm1/4HGfQ*\GRn$&l3@G]&[W.9]29&`iJP*IZ#h3BJFI"#KBc77978kKdZa]=8Ojg[]'QXFq'k7%D6`%Xd[F)D`ge-ti+*%Tq%^73!%18,'YN&Q#S'>J]El-Wu!:;YC*kAnjln).@W=qQGrG3B1)5P;O3kE)*(&<jC@\?4lh`q*KM%f)*:5@:gO5:Vj[-EVO@$D%:MgT!@#,eY_SLL?1^E41JAdOQ+/AahNJ+7l^bkXBZ\&u)(am`)b;JlR>'>U5=U*2[bZ47.8';J4<If6ld035eXr#X<'I5)q/s.QN%j=0WX:Zbq`1o[F@AdMFBe+YJ1L2I.4-:_#]YT\-LG`<4\O!ShgF74/;>u'Wi2UZFZ\.Ro0Nn1J'Og>lN\KkkR,`Vh!+lBRRkp=:O%"(!]Ugjc+u>gi*E!\GNQH(kTVABOPPM(Ep'0h@nr'&o'OdO%1<T&UI&,upCE*8U`NR0&-%Z@PXK9<'\FD=/)hThA0X'F];%0IEaL%KkHaF@oP6q8X>d"2#9eN/]fO]@.FN+6r6T1)7lu+YppkG,t3rp$5OnJ-*lSlWZeC)D14LFbn6rnH:^!4N5Y;Wj>un9J@3n=14R3i%'U=i]!HKsZ!p#O[=N"`+"D9nm'D)nYJ(\?]a!k9)*:\&4/fF19<@g^d+BW4e:BpJWRM^1Wl.o","A4IE=8:?q;jE!$Oq\Xj:9Z0i%qIl!BQLM-u7VX]A-HIK);K;0%T.l#<--Y=!=5`3Tc9S>m0oVTS1BBFcaF=A`?0S%#;+-26<`DBRQI1@U&0kq]):4fQ9bT4XC8/H(%-]K9h.<?=VjBhjc0IE5\G$`!1)-TTd-:]i_LLmV_.Jpf6AJbQ<Elf").0O<JXi]&AP)+J:3V81RZ'78Aja`X!>5jW-FhW1$A8&K`%N.Wh3!!?)!".DSjWe.FooP$kD0tO?Q8kIMh/PH2_P+Gakd8X,t]Y#*+d$,`@\HdkZ#Tfh]MsA^24#KX?H'_1&T[QZro&^3G!1FRr%&ODsAc)Zks2lgr*Xn#bAq=?;H+glnCjGE8G>FY%m_WuTuh&jZ'.mFOhQZQM7_pBuf=ft5eS%S26"Pr.p75DhCYb/fI"Zi$D,Y(f'%Kl^"VB'>sdjDnlEb[fY9S&lScD?1H`8`3<akKt5[LnZiN)F\RJ,F1DmlYq44&&I<;_9<2BH:cQGl*%b0q1i?iK^\g^Qtu19>i?hC%'*)Ap6gu[Y,-:AmLX6GM:[2IU-K1G;F^A)0.DFrhdsTE0V\/;UaP=ho5QhS1RA_*ORjCAJZslR=+&hLC\pqX>@&it2-,D?Li#Q[:%>kcO9GaT/WA\BA1HFgFNEom1::qj.#HoU93e\r0hlJ`i%*f9V!)f!KVe;t>'L;X_eDW0A&4GRf_),C?s-\drX3*58&>e0rCj9V9$%1`jtbZQuN]*WiM^&keVp=q54+T]L0r)i/QT&B9;q5)kVEq6[pu"c=j'@=j5pO7Hm7cu_P`=g`d-Jme.X/ftH]#s8P:k434kQn(_k%q`BGS)21\u4%aoeSM6&S`m:+(2qh0?V4C,emR!.R-FD&-mAraeGi89?9K[:kEMrlYr)a\#SY1dIMM?mhnPLpW9hE\u;(b7<;4"d@%=+J(["qJ54X<Hf)EN"-KVRc<NNA<o<)eG"\2m!\8SZ?nC^%*RQ*p's@;6Ceq4-+Dn/'>iI2[_?[nBD#3%*2PPb1BU<K!0Ci1f*QM%8A8gYjR#<R+9;`(9MuA5rAYLpZ&`\n+k8ed%5>bJb`#qT1['k-<N^W10s3SMj2tBj],K^-PbP1XW43(.5N%G`Hs2`/BkGK:-.R2?%A'u2lO>?P;k?d,S?K%.*L)]Xi_br.V;FXDSb/7I?Kt1.r1bqcT8HN:^#AC'Dq4o?-,!H#L]4f%u&keV0=Uo'niQO"(*OL9:E&R6R%QTW?3D.khKO@qoUe'LG^VO#"m2pHjW[]!4.MTgVb:dF3p.F'@lSls?;FHsS@SYq#I#0k>hU!j\YiH"\>OH[MU[!5_:)Og)-)67"/%$$AR3iA(olSd6UBJ4;qL_DGF>QFUAcZ.@(Bm6&`Q,?ASn2J(1fScuB?CHEbl/j/8+1f5KNhU"E[BprcB^0tT7A6J&N\4#QAKb+N6%$F/GJMN6QV<Zsje1_DP(BI)eAjE('(R$/]oE),6i_27V^P;oLJ`YTJ[U(e:Q&3MDgA'32TZqcuXlGVlRKD9\ljmfK9hDH70CI1UT%YPT>_1P`SS"7\M/Q(;l\)1lf?CGNa63(B\P<T]QDI*\pmP'd$T8+@=5T&qQ]!KH?b/9ds]1Dp8lAtfLnN?K`5TU,b!a@]9Rm670G%$91iQ'l]a6.hq(4=$#&=\H8AC]<2e8RWsL!Y(?V$)Yg_[]+j%'-(?2d=&e'?%'u1\RK5u[@&X-RC^(2U83t,J4e0->;n@a,D>M_U%2gY`Z3Au)m^H.F!AM`%/+@soLm6i-/B0M0)1IVNn6^)c]MBfBZ3Lo2MQGZiHmCM.E\r6oFi<*)KW!,$HOY1_eqBTO=MYPC/:fL@i%_\C#<r0%L+c,<QR*M0-p,XXMK6094(EY<V](,)XWo,d-O^i871_V-;grlJ`s.%U_$EreIaM!BY-?A2MLXO>MIb)PdNg,8b;?'9Ni%cNVO/CX7Ub\ZMEbBGWk0KZ\'9]R_EP&b))ZMQ$,+-DSFCED/58/PH2toZnIe1t+;[X?7EZX/XOR$Ye`3Jsc`]GV_oYi%<js^Brgm%1ZuU/V#K*[Gb_37n>6q0\T=#G[oOR2b(Es*5LcO.fDW;TRA4#nJTi0sb"S$m(IQi7&LLEb5rXOl9O6dg$q"$Pb3Q#h`E0]tR]gr@%1g`0OEq^`EM83Q/0.7(]-LM9MJUX+e+'/=bjoElB`si?@4+lrl>NKUD*ojguN%<j=V7G=Y2lYWbIr(f(QV>4p6O/&82#a.$fdKFt%@IU1@`K5\9\Q:cb$E*M'BBl-C`@RF?RZTNtk<Z9(:G)dg;Xbi/*mf:<#gi)>Jt`q\ZksEKR0-V&BK;aI@BLP/\WDFtG&EsKj%h<"%Bu,oV5g^mC5H=o@9oqdgFBAjr6rER9>`>ONAFh.kh*XP)#*6Wn?0KbIZO;D=r[Cl6jrB)2^n6,<MoqZA'i`9#SCKXR>.M>;LUh"-%F(Ok5_H@F3\$n.-js$_nn_if,*6<cAJ%f:jAH!I"LioH;T4`t9-n9[bMU=gp#p!?.n1"f,GBdNr_+XtA]:#T@m&%f2`e-4pSHj(9%)8g?V1lC+r4tLcXcJd?s_d%JSC\BG`#1"ol%D;9d=(]<Sj?,U9]\1DX*-eg]"W<E,1C0DC)GgL[S#?(N2c$3kEKIen_1<"7H8A\a%o_)&tjE:09]frOr7k=_=HB6en/9_<UdIt_*ml]0DQ05]`GCEu'HtPLm7D-*[jJ[_>RQrtaWi7F<:c)H%5qpDZe&.g-8PGdQ0`f&m%h=R8V&k?[lOt'$L=dQf\foUkA,VENn,0jK4l!2.>DK3dWMc`KUf?D;jL6@LhQV"dumM+RkT;DZ$@[OZ:81/APi'[KU5\kBs'@=da%af>LAUbSYfAI_6:84H1?r.K5'8/..RFo%NN2[W)&!0Wia49@K?Kh5nHSUr).f*R=d+Y+!Y-E:V8kof3Se4a#.A`iQBI\Lj/iNf<a%OG%9oQ>fnOLJe-ZSaR2k9gQW5&keU%).FK:MO.i+*+>8/iraTFM8)\0!FIDU(P#ZRSWgfu:9(f1>S@5#\cf>N2_=3%2"PFMTOVd@%8Uf))&sk?Y]j-+]#!LdA@Hl>uFHX!>H@[n-QuLNDN^0'foSH(.h'q"R>oc\j9"L`A#3dF&-VsYJo4`rV"ghl,dfd3,8LiCLl)0N9%EG9Jfb8%QJ`AGpoVa"7.F-n:>o;M4eJSA24^dV6rWeSREK*![#"cl2$QOF20Fo/OX5gojpSXMrRo@(_,\?n8Z'lneR.O<KYVT91/%8VU8DN6.4*r#(i:;pKj`)&J#nVHblF6OI7j:M]MX[3XbgEur)*Be4+]BfW'PR$Ku!Ec$lJLm!Te>StC)XX'm#(sj7qW?kK^6[O2!%;KMpJ=OgACU'B1]Ln`g&\Q0kA;cR,pnmXEXL+Sb&LPD<)*i6i6lHpS<1M)3V<Y:lCL1UXXo)p6<AB!#RUe[<>eV@_]l5XZCI&gQP%R*0;JD&=Qt;7!^[DC3<IGM<"(e@spP/gAs_XGA%hQ4`Pm&9d(TA$jM`*!;(W0Dd%t#<$[kU-S_kPiQMXY53DuR\>X/Ois;J?n+Kn%h1;@&G2maW8QR6I2pIitD\O?%hC*+Q]P3(%m]=jaf#f(UaWGSl;:,SH7([X3T(Oh))8SCabiKaJ#r=g.JkE5FnCf2"%mU_m$pB:#%5gpuMk(!jg1-mg*;<8(thT_11[@8BQ`Akrka5<P7:?uM$Ea#r0^rreE0cGIBm>mV9^="$;7*rS,4!WNU\^$a1hD2.[/HY8V=aRS>%=1[R&8(,pT?+O.Tm9RA+fH]o]@7/!e@0^`kN?uht_RWHe%Xl4"+I-J_@V@3OF(IS]V&L^HP9YnGd<J42c'"mfH5OBUBIn"\BfW'P%R$Pe'DBR6DJJ\bMq(t:\jjO8E'dumZR%T:j*3sF4#%']o/O5pNR!b:E#=D5fO2?[_Hl=*h@O[__PN<i^W!L&6e<eYkdqEl+hQ4`E%[`U2i4N_d_U0KM5F`)/2/]u$u[i])=OIO4_(lkk''geGk3J8fL+;ge#fDfdXgNG,@NpFEPs.Na)fE1=tmh`a\/_Ub4L'5UToL97X%@p-SU8ap1VJ+$Ji+u<`$WZH:Aa\eNiR"qZI3qqKVNI+'FDPkc5?7o(+fTYoIGm^WY32HHDoT8M.LO,G3lcVHU7MkK,2nF<2]6-C9%m<d4SZh<g.4hP$L%UQ<a,i0%bf@T-Go#?=DAocCJ4/4\W>OJL;Vn1bYl?86qh&BKpnTjRI^ZXoXk2*dn1:K9<Nj/MK5_"pmmhC=!%EkeG:kc:87ELiq]`;T1FrE8p**[:?NXcH,rQ2JB_:0n^p;@`E[YVpF+Vn0"Fm7le,q61)gm(o</&$A-%Rcm8L#KJ"+-%.)IOrcfi%ch)59iqA[U.1"$NMM>jk)gh)lMn:)%`Fn)Fp9P9up7Q,l9%1XYjPqFYqe3g4LQCas7aaKTa!HLV%+lsK&^038K<3qL^*ApFr&Y:E%\_j84%n'#aj,3KOCXb#)oKc37)oMUj!QN@^FsDdF%u,K$I5O^T<RNIZkoLP3:n?Js5DXI@_n-;rY'tT6F?o`bCWrtol_/Aa]Nh't%X%*.MWaD=>rAbShTlPW/?EPK8jn.!`pV_:e\gQ@2geo5cGRIF0:dS3?kjK=`_t*`ah$"`LY'1c'bDVtIb;Taa?#[/tGLb+/HtsnM%l]\lUia0>"l[ccbA*iH(=3S[j?bXR.5?eXOf>Gf)RDc_mB)-*liI<d>fB3b7LR7>mnT(HVnYVr#A*2m1\2\OC1,u@=T2&5UaHF2!%[Nt<o/`HK;IF7!%LI8aN?Ouga6`OBZmfYMTBD;+P*7<MN9D%qFNp+-(NV_1Q4_4#:^["Pj?0NM[5D8KL5Dm4Vi.eXblb1eZ*=f_=%e$'XDeKXoX8E@s>oF:"Hq61;mCr;lY)t)`:.]8nA3;83O_ERm'?`CdJ,cEQT:)#>aD.0$/PqL:h,u;52K(bB=K(^=#%taLoG5Z+g%\g$.h*=5(o<B5l3F620e7eLj/JHSk`W)mNR[`TA'N:tTd4P"FBp?n,k]@"LO"8i&5pX:fhk7Y2S4bq,XL:cI>]+8@6Yag5tZ)?Jb%0cSGfq]>A->WpU(LTBb4'=uVih3.RY.bgR_Xrkg[=5rI2L/M\$_@6cMc]`8%Jj,&>h8m`2<QS>`WEg*]5-K@:L!;X0]*oAD3ic:5%['r+0Cje:]H[#/0DIcuUq9hcH\%^YHmV0KNSp$m0pU"-0[,8S&I5b@@8(YZ+p%diWV>]nSGQ//5Y0Wm!%nG5Qj64XZ?ALP19[T%P%F**,!*$'[DW`CdNH=Y.R*a<[Z_3SnbhS*[ml%>24G@-p%?#M#J8*&QnlE@MnSNa8'ml**1Hb7`bY4M=J]H<0:05u$0O5<Y*OM1\b%AFCV6G[\b().pS3qHB8ion@):4N=5#f3?mQp0ekgR"diQ2#LA(qC42"eZ\'!k_HA-$gJNp\aDUeB\L<U1_'0f`cS%kDdiOr#>KQl%Zj0<P\@[3CqLsrcmHT61oCWJ-G,gV-10!pX94.nIEEqdpT[6\Tohr7eY`^Q#e)#!'d.P3d?bp\i^4P<mEYl(9DtaP7i6,N1^A9Te%B12XaHdqf]oh`:C0!ETFH$tB($pTMZ5P4BIaQLOBI#`TX!eQGYmj`sZNpTGlGXLi3WZ`d"/Ep'M&22,d;Sj"+22CTl(jZgr4ZKhG%FS*rJ?"EGAg9!%&ZoaUUU`1>f-f$hRrUN,4qmh$_]H/]/cZaY_KbY"\O*!Tk?=/]8X*E=G="na'HWM-@KPVAJgg]OQNnj#p-$D@@%jl5mo7=WYXS^b@Ml(i2I1jHt3[m^(ni.%X5/>;r82*t[<1l^fp4_3u9Zg18i]"Ym.L(C!TX*/Z;YZK?9P!;8@[%Z"&$@pQNU(])G%G^fV+=brPD\ME>BK\<mE`$.Mfm,_V4-)&\2?"S^ZhgjLG&+f;.4T&pUiEl@^PRZ$6nBS55S70RLd-A[2%K<G"SkQ_S<@$!J-GkKu%.2)PaU+pTQ`F2]dccg]Fi-P)Klob0<8YAZ8eio\,rLc_SP@FFJ.%_TH-;C1*q(!U[6BUP'/'.Wk;']9067MD+2%c<WdR'cAQoWpF%.HbR:]`12BX9R8<L_9ts]!]qg`9Ugm<_B+=Fe4!hgWr%h)@.76nf@r$s!*+RqQ5eQQ2':d/`;rR^As/b8S[A9?iTt.I/4fX6iW)B%:C,Zq'QLMP+DP4%[pH$j&knsT)gi5Op01)j/a'63;)t8B8_-j0]BiP==/pcXU5FhaB^qCAe31LcUK'K5V;5gZ?FGH/YXFF!PV9gY%LUT"Z>lKj^/s22%R,moFI(9>L*:%#Yn!=o12<8q3:n=T1otFO*d5oc]J@5#0jpED=Pi%;pJ%SJ9.2i0e<7-9e?l_#Rh@2#ARPgLq%Jk2prkq%.@*MKH\;JC$c?he/e!uBDm6^"THBf:_4:Z;:a%N2pXq9Mo-1.s)2D>U]V:XR[cCLT%fUI*SnT8P7Y9K=s&JSrOn`WR;h%(.P/=2o3R*j_mQ<@0sskpdFS[<f03Y.09QNq#L1#TGb(2;7WM?*Vf2&:tECGnHuqsW/pMVDC=`ls6"n/3VPDVYjUoYoM>Mcj_')?%2c'JLks'Rjme=KkH2RJfI$.Ftf7+aWcfIUd:[SW:fP*'7%<maSfJeArKDuk\nh.=SQ'LJW25Ci#\/RGjZC/!0M_nkGSt'WM)-,fC%aZaBPE8RN<:Wk;B-u9g&1duA.MDDf;%L#<qnkaun?6&TX+BdeQh3-[$FIAUU=.-)k#j&'ThpNnH.I-fP?5]L-<*V`j]DAV7ETO!]%CcbO*(u9!0%Tp&WjFV4(B<2[ShI3'=nsiBBj6;k(>3,_SQlLYglJr`*'rRe!c4:&A/d%*=[nE&76$9A337?tF;8+f*b&Y?tE]-7`%gmnb+`ol,qEH'CKoVMh*!PVTh;3ri/IEqZ>6dj4Z1<,X?D$J`t,nJ:W*"6(6[%Whq+BeM&6%:N6AUF>0p1*rmr>6KM3U%>2%ou1r%Y_j>2)jB^UE7%F@E"UM7EN8WG"H$`Gr?_K,-?esAk@_aXK?D9V5Sj3u,O29PJ\O\BVp[=3GW2Qu$NfM$4=40gZiqBAij!Thrtg)=%9GL,(/*7j?[SkB#hUNiCR>(oS[Qh_LDMd>J&ZJ3qZM(_'-j'Ze92#CuPkGc,b"6o:ZHnGF&4(nk$Hs^UL7KtCZ18l(q8u+q<S>LB%.3Z7-/Op/VLP=/?M,6?6e,dV,!TP`Q-KNYc<"bSH='S]QU_LNbq77QKT#!s.8k7<W.uYkaI0Z(Dm(k(t-c%9j4ZkNT((p'`6q!0_%<G><D:3,"17ke**LdQ6=>rKnK@uoaog7uELs!$NU!4h#'EefWUr^`i0kDpuE-ImaOs+gB2Ya+,jb:l4Iit:fIp84pJm%k0*33WN$%97\nEK<brD]Mp"M%aa;S[%3;?Brr0C!FKa@jUHYD:_m)r.eiH#iVA.ZWdEY%8A8=DqZ<tY8(443R$uYDq"s+\c103(2F!eJn'gF^%&(8D1eCU$qd=l!+[A[Ol#WIeDL&q9D;oOCmcB$j/oOk"Y5so';1e;kd,q4d^_&4c'meVDGd32D4/Kd4PQ4^;$+tBB>,;s"`TU/";%K(."e$8bdFBJ7`K*&P#;A1eC9E:F`l3NOl`"C,;Wi;-+cZL:Xaj`KYX8A73.i_OL=qU2U)0/7-;Hg^!V(p3^G=L>dfAE!t+>,"3:%_XaUaR.rKbZH6bqOg<#',,:e(k!'t`!i;gp1(7>Po^inH%.^.d65F`oKO/)iO>\W=mJ[V-e=<0JAgLL!\g'KmYac!@h&lu<'l?5N%TE>Oc:^%K[X(]/%(A*]N8Lh">+J`9+eiEb7i-,uVIjPU:,Xe2GSU!)U#=13T0.LO\1m7)h:O`e!$NC'&U@^17.N7%=B^#2EW.)bP%rrC4<K4"F1UTAr9FI?g`0^c@F"JT%.+0+XZ3m0P=i/7\1J:BB&!3dPp'6K:b^%C\^FFXjgZTafps-8bV+4C8e<GL>GcEF&+DQTZ#%Q+r,'Z_+qikIdX]i<0jOZ*m]-g+t7bfoR7`G"bb5c(LK_-PRa@R)'2brLa'hkSTgD<VBP7I53'lnDmE(-3@?UO,GCm\WpAaVQM'3%f"8RR2u$,^K'+dYX.D_6V7ftrA><[cW5'-/g9k.";lFDcl4!cUIaXW!8a:I2C%rH1GMpXb3+TDiE8bHm/Kn3h$ME82p&p[p@17G&%U[!>#rK]L?jk4M`:;uCdgFXY<LX8S6m8D?(,17rCn5U(->D&&I,$cEjJ;u$:-GhD!>$&IPY$G'0ZL&20(j>^f9Oa5f$C!8]+S^>c%**!i4*m38W2^_W,DPg\/KiW+(eYVbjF9DK?12&XAYuWWn8YpUC"u8*?#ZBp$_=g)"7CXHC6>_[oTY)TXY2'8pHj#TMN+(LODB""\%C&`rnrQad0h)E+Jh62;+_p0]4=G\COp0:ac,a8cT?r1VRPD>f/BqTttN1^DCOFMMAZ),82A\pm@J_0Q[nh?fZ1R&X`>a@DcYka)L%EdiL_-OPkb9g"MR]Ek,b<shNNbh/%X_0Y8#Z0gJulr+\),'TsX-Wu6,7j+&%&U;3nm(kLgJ92oZ]QVn]oaB-9/@%d!LNO$J,02=u%;/;oc`OT1efeREOo87XJ!T$<?)9cd_br'g%'*s*G2=a2G1jBuF58Bn6,oPj@67@V#2FKr,jQ*$I86/!'6+VmW>7Ntq5NI4L8gJnK%oD#_LF82894NNoO:@AK1[:d_K/<a1N#g&`XNe;sCOcGTU96'PhkU42%:#B^BC?E00V'80X4P6-lOVlm3Q$"DYNdABm(;#Sb<-j"(%;+!L&I'"OgQYX?>iPn9=4`GQLSAtdk8"Iek1;>.c[;]TGJg$kj1m0(#34KB"="$^1ELdsX,+h6o0T'e&)7/9K'N'7DD:q`:Sbk2Q%>rnATc@A>c4?(d`WJsFLh1[(-[CcP9Qr(4&U2MjHcu2$1'267dG/j%(`e8k4)8LMpQYhH'o(08CI*b&d^.p3*?gP7^>u`l8%%hNo%cT)^Ql&'NbEn8(C&E<hu8+5-GB?d7Lg7IchC9L4L_Y(6QT]$Y9ZPU)\h69WI#3\MLe0o4(/-JpXp]4I\[-I-b77D0(16@5m"X%*Z%[=patnjgb.?3&_?/pkKe"r"*Umlgj^_'-Tfe`9r./mQa^:%"O);[cTLLSM.hB[$Yt)18TPaV^aVN3SHbCRi@-isV"</OHZ\D-G=!%6:&BNU*q&0*Mr:IMsa-6KXAV0]4_khM*80OfE+7LgI,pFM[3dTVMH[j:3K%EBPbL/V5qif[d,6/+J00]U:iXpa>uY.5fuXoCZ^Z$%i'g!/_&a`!aL5g(gY<3*p.VIEn<inG_n40JG*C1L5cLutpWO%X[bni[Qcic&PTD/FF]"Qu5pG#V/7jIg#7"5l0LFPMA3Tp@!R`3+%g`F<b)d#;Z,R>osN3f:l2WY4/?Bq3cS@klo!C8mU8's;+CN9J"O&WDN")p-"Zm@e>D/d!tkGM2NFi*k`?4@4@7@_8HUgcXo;,0n2%Si(u+i5ACD&0]BQ%j5[n<X#:/+gUk5Ui7j68Pkq$RB\AC#3g!caLEHT)C\U2mKa_fjEWMkK1O"qk0FU:gIqhQe&*L;ak<fW\><k3%)To/BHGY@K2\0NY4jWL`BF-GG$KAS2Wlj6r-h\TUY-O<9]e0H["\bsjhl>UX88Zm--"_n[%DH$l9]^RfKMict8?iW/<s@b2WQ80T%_X^O,2k*')j9+GB)V'Ao$N.*mN!mmso.D"TrkDQ&j*?F0g0p,0a(,ZA8c1ih)7ENi[qn@*a#4!b,#Zpl^<qV"1YD/I=I"M\C:V_O%O^VN'A*b!T+q]BjqdTig+ZN&A)qgQfJ@GW1quNVTA4SO@e?pM=Oa*!n86u^Y66=a/[5F!Q_*!<*nmf:sC^Q[Z+DjGK.Yp5,qHPq4%W3@7t9H0M+[44CtV5iqsEYr\d/-Pi<:APgAOj"RD+V-7OT1IC\b64*(4UJql1+Y=0pj^\9QQT2H3<L5:)8Jh-Xh1jX\4aI?4LZJE%E3t9iR_6"gKNeB?+`h1f1D3PEK8r,!fh]s=E=ehC`QWS5"MtpR.3"*2"3KYB*&&Le?O'+7b3L6NlM'a4KmA]p,e@ptjR,MNDBT:A%QJH(k!C@P<l.g+kE>?V:$;U"P!=#7sR1O,\8>r*Wia">Da.f(&mZVc5W\r+S'qnPnR=g;#d/+gh[LOIiZT,&O+B@8OMZacZP.2Zs%'Jb>0LQUT71>SE0@NSQ(>HnYaRB>&0YV6@;4PsA!4L][F>Fhqc=1o[7(OMFA1Ca<T]C5a\f>%9O@44EZ]>fEg#J<4bLY=c#k@fr!%Ync,1GVT5P2k0aD^O5p>^\d.P^N4S$M_4V7lY9!32)<%Qr4n*F1@sl[s7!)HI=itj+9#paJ,7>q\7V@@>I0+b30pu0X$mJ@V2FJ0%-oD$Y7EbVR<Fl:Z?F1'4BP#&1BJ7/(668DoG=;tH7N2A!=TuQ,TO0<&VfXWGO!5YZgWt%R\tj_if)*1FI>e$)'\O'$8gB"R-b\UB%-ZWiY+o6f[-<^I4lCjo<&?QMfnc^$rc^kW\I\1d[aE+#D79#s1I,3qge*I@J4edZFk)V6u9[$UGS7LnUSUG;KDtWh+?G(aEG9i^!%FF#>!.PZV4Ec`>rOL<^,OG1fG7a"b?6D_(``4uYQK.-)Vl9R\`KOq3W\QapSU69QJ=D\=W_OXXC/b0X^a0%@F;pp6=!_<^JA05K_%@%dUuToFFr[b=@EXWXiE[`$p7,=LNGjj+:9?B)!0m3WR9$Bf-IfuY-Cb2'p^(j#p>k7G]Q#UOB&Pt5mDVkQL4"R(K:r)lbF1CQ]$%COS<_JfB[U,Pufq0qFYcgs\l+@GMt*g(K@=Y`A6tk[ll@G@R;u/i*_NM%S$?aY="*?I!(67/9qN*9_)OOTpnIOCS-IW3fE%c'A&*%K`[bd.VXo:ag%tsOZ5\Dk'hq35Q?tZn:1+XV)$[uF-qE,K$)uc6`pHcLP<A\"D[-cb]SUT6K@HKB]*h>"E3Xn^B'n7s0$WroeZ51%QF4SUNG.kqi#ph]1=ARSP/H/$#U<t)4i,X20s=m4UWS35:_-D4'b`V4EWQeT:I5/q)Jgmk-5^":8%W#]KL\13:(X@][#M=<'@'$6%6JL)G!TYEfh=LlP2KSNqfeNWMW0:EBjfHZ&j<:=FKVfNQ)IX*e6$+C&Y%:0"8[apg*?[f"&cmZ3&FuT,Qni4l64sPL4&jE1<8^0!%_$C7Yd].u=bY>949hHHnOBi*h5c,HSS6@p8)!*kE3AFchh#L3:;=#$b.%!87e^(%k$P5_;d%5bdX@5NY@2X(.gshL/^[TkgE'tks%?pncK,CE$$6FN2==+3rq,U)s(R?/KE+CRlOF?5@_4LNg^<B+eb#*&$>J7Q#EDYqP`Q2QeLM[njOg,nAV%cu2(6_g1P9\j2S+;K'3%-(-6A9Ss9uS?;*E#)P=o.j*3KFQSXkr>c_^HF1D#=0UqeC`RU52J<'oa\$3P)B]P6LTigQ:C?!2&[$uNQTCIR9eJKUK\W+%Tg:\'%]iq*?q_Z2T11`,'FGRm0muVQL;`!ITe&6BEMp&oQ%3RQ?1;-S:66[7@`aAp'%=g+l,0RYMLWi;[a`#t^FLk5:C*Zo3%bmkB@ObF'%Ak&ACf;s2&2i+%V5h5JR+bXA2%,E"Qa<71=<K>(,P$@+6ADt]3Ah0nZLWhas#es956Rs%Yq\bqlWlCF;ZKgr'cj2";lSutD7lj]*%+Uig[R*7m4!L=%F'3V!Xqa'^n\Y.]\I8F<.7Z(^b8jHU6*m@m#o37deo5"mTYV-F>JZs\JSN5&e;]p1%G.S?8lmc,[i3t8kgErYu%s%OF'rZ*lYedh=mJTs@4h'qT&W;'A#:BJKEZ]jBXf*mpt8T+fbAk^qp`qfh-a>Bn;daYGJO!0<q:+hSuS,H00m(bYF1VcuA'Ft?8%/^b#lIEN^2G]i'R'[:F_oYWl0_pFg`.r@%XHTJF9WgqtP`[O3HgCVeGgI)Vi6KH,4qdh/hk>oj4"Te8%#bI=gP$,aF1B)]O=;M^<%_.FTGjRk;4S74Ih0ejUcoT1$*9T;-DdE2nNOEi56KOrJGPFS\17(f3M["EA$rJT,^>PG`nW#P]s*UQO%7%U87_2s5$\Y)8d97[K+%#6uBi(#)?0_a&n4)3XKIK>>u*.N_3LC]%IXcuDC)73uJUF97_)()I;4-A/c!4Y-7_G=NZb,=HLn*q]5Tn"9fq)KP8SJ<Q'L33b?O%on6_9Z6R=F-aidVTp'0onVH4A`>G7o6J+Et2$OcSb/q+b.)r;GVols!!3rq7L]rb/E)eFtJkK_t-6gn%^3B`@RgDlN].F8hWGk[J%T`pZ[6md])mR:2I%/%tf%`gF+R>%UQiJ'$<MnW-B&O9p?,7n:,98uGTg=$QWH^)ORQKWrA$;>ILC9OdD%s1/M9jlqIE;!&_Fq)J)%1;?CM9Rk&;5h@ne4?R6VRL[7]%h)gZ'"rOA8]j1chhi1@I?*[kX;&*gU&s@U'G@cR>JZNcn_q0XGW1$lZKFVpT@sCD;hf8*H/9?X%k/1O'C4`U85>o1_:4`2s@7OUZU'n#LlnO;@0cpi"oiW"cfMl:BKQ]KA6CTH(Ic+34KuRlDJt+:j1JT7WV!nip2]1j8_dKKPRiXRU%QM1hV[)&oo1&EGm3bDDfe_t@RQfuBnIkE:aML>#pZPMi!M&?Is;cDO;$A['\R89cEXh?P?1#D96gB?qY/r!I5Wk<K^[7ke)A,jR:%Ch_TZ-MD2s0a=M(Tgn=bEj#gLp_[/\4.6#bK*B(',n%p*+A7PNWL0?<OOW%E^40Y/(On^`F3R"->_H#g[p#G.\;@H.FP3'>9roSI%(bX.C]\/AN*.l6Z)lCMbjFrOp!;!B0KH/q+V"_+a2Ce*Em&Y^XjhY@726_u=<4VL6G:qsi+-'b_D[_b\5:C$uoU`IE*W7rQ(k&83%#/>Y0(f(<h0^pWXDdX`OQ;'r%/ub&.A5S/7X9fh?<L<uOZiaj:9V1$la_mPd;#k#:Eq[31jA5s2K6dL:!+2ls+?/(E(GA0!dh/qA%Vbd)i7sh3@5ghK5Zfqas65!#LVihUt0EPc[*j1X31"4#u,4&<%[!/Qag=0"7:l7Gr(;6_uRmg$.2I->Sgk7bO\nknm$P"t8JT"G0%D>F=J-TlBpK`Sk:Zc/[pT][eA/>W@lDEUau2.3T>4f:5D0[h!]B"A'U4+X7k@#fTBdq7;9YYn@Zl2u@KSEI!o!6OW.6!u:g]t@Q8%(iK$1&3u3BD']7YmONa@=p,Dm6VEKM+Jq_<QAqk\<T8TJog%?$B\"%R7*$["D1X\]Zo3q*TpLR^K`]=<G<RJ[4/EU,8d0rNC[cA5%9U+h*:/8\^d)UW>$.Y%d<X"p\bXS7qC&q#iT;>c1lkI(IQ.j%)/e3'S$cVs>0*'AMZ5!cj6fmF3@9g#_n%CdORgI/Pb`[n913eIN%S-K.jS:Bc@fRSg`@RnfG`[+fG#(X5qC)Ua"+'ldTJZW-q2_uf!A$T$5.l.Tl>M9oajT$K7bZj6QJE/ScF?%LO%_cVF4@m.Q2uLm+%n_h5sW?0:d87=I'9\n%XSbuLQSH:52?.(LaSJBo3&aoCgDa8bWokULZXI@W6:rP'/FjkU2/_X9J1`hd#^%Vno7ss:fL7j>N`a0YT%Y&ok71]rtC.G=Eg[ULlL8<1W`C5#f](54C^JTf<W"JhFaWW[bQLV@\?OnSq!P%*>nn+*TKlGXft*Y$%=*qCp.8b<@,nm3IaVLB]W%[2]:Z;0N6sikD*TgFL4l=WD:^7aaG:YDu(&D&5UjN_Qom"W/iW8:+p]YY-3[Iq&dWg6&SW"62q!28SsIG!Q2I4Z7$Ka<L!T,2:X?%FMX3K@i^:YWldaYZ!Ac))(KPHb$M/1cCsSQdo4^n&!XAp:Sg`Tfb&*iMrghh#e5`O@PP`aQfq.5]MiisRh7,TRb@C2p=bL@Cs%c7%e9S,bkP(\9$Z]dKOG,,4?*F48j=2JA'p53PpfV.`@uEn5+7W(UA_\3hl)6WF]2Np\$A%$0/3@Xr^#$o^I"_;N;/MG<Ch'X#-L5HF%40$"Rrup=Q`jo?J\9*Wtdqd=$F(dU%`*5>\]eXQi@RtOlU?Qo"muF2"C\hd=idiL(4-GW"O6e=lX1>m<kY5ZoRf.tEg\8WWL1i2k%XUWgDE9)loN*ml#!A)]bf1n`p>4FMH%kP1)e"tI)WA]al=r$70g1Jm)9gJAl;iD7';4si"kRY])0o1-Uk>KB<0._@Nokb+u69Dqi%=`$;e<-0JkOak6h9K^SLpb4CV6WPF$EnZ&^BuE>4+H4Qd2N\N?a#Ybfg);,n3SV0>HN6o<"/dAq5i07;Qlh=7Po/Z<fNQUf2qHXO%=a5g-5:3)m$2(+pWgO,V8ip'a1EDrh\"3FYa+Z3]WZ&)L0ZYi]Ir=!\IWln`<!u0t8qmQ\ED-Ua;+r"Nk%Or2JhbXUcVHr?[Ph)]%BboDR=Cgc:;b%.O1fj9n@]P)98f)f]BS6@UlKYq5"\!"PiL.H$nU;nJ.65E[Ss+d\K3&eu>?+Ul#f2I-Mb2rK8QbI]2TQjWW'8gr%acmf'(_2.'%2f3dggQu,Y]6=hBGS5f<\u&c.EA/':^13*N^+,T3F?LsD<PRfYO=ZN)"3>k?RH`5CU*\90VhQ8!aiiI+POY#WAZE;%K+1?cZ(&-)A/ad'N6UACT1sjC";oXn1"Kr>fZUn5V$*P<na&<H+/@SYi8?:gBYVg@6NMho]/Dg;FDC@Td):5mT.&K_B5#!o;V%-k%"t=5U[m`<Ug?>]l-;Bd"5hG;N?7Y2%8C4.3rnR`FqBT-e@?:jA8RFiX[0htj?eU:^mG&HB!ln&26-3sSk+(YI@t2!TAA(ZLgCT5B%c](-'[Q<1\`V@!4Fp9a*e-nmm(2I7nJa*Ml`DRKdk>P]FKfT4NF&3V`C[WsuM(]p-lCa41cuo"D#9'c+CW<g@9Pr%#0TtOncrH*T%Q>+W.)ItRg>V1s\JI?tcLf:T=RL\"&10D#1_.s8:hu8^2b9M)1nd=P6H4f=PV,c2-Ss)O`Gc,FG2@pf^UqlC!=OY>*2?[^rO(5'2%C3RKZ8>f>A_(cH0875V6jmOp?V0^aG".sJ8TURc8(_b3)97R,+rS2ELTWFueB^SpZXNN=&[gK2&de:qFbiiVs-I8D`+Y>-)6]"Al%@TKV]bLrp''M;!gWfj[8oV>cJgN8a!1`_gQH*Pnhm-aWDEmikfdN"94I*]?:C:IO0@'KX7[YfmB^`<&aDA'A>A!U8r!BO25$A4U?%Z]@q$#Ran@AgVb+L#966C<^#9MoUueW+T4L/(=Ws4]-B*W@\G9jM9$(D4WT?V<1ca6uauq`C5ElSqX6'-tbjFh7O:]+fGC2(D4Qo%:qJ[Iea';O%M5*g6U&S488njV[u)]E$EG]5(Nq'=8^eq13c!Te4.$\3-60*C^Ps67.+'!djuq;$nLq2k(\TFpY`5p2'G<#BFcK=X%ajt`9!asL_?)t8iE_S]B5_RuBPo0idHiM*uR]uLlCDbna8=O;Co;Nm7!-eHjIfV'&16Dkie_h!jaRi/(NV!`H4FG4dJ-0%5#@O)+%\Ifp9E8Ho)#Kdt="/2H>kf)\:;`?BqDF,,i-GPX@XFZ\`gi>r;!+a:IX@G4C[o:+U*:F;+DTb=9jWUFl-,rD8&Eu5,"O;r6HkiMg%\:45SRK/erI4?BQk1[-:VOsX?!eI77rUhU?oUUZ(-/N$''kU_p-cl*jFhpAk!R\%?X=$1RKG,X&-\TLK6J1&B&!2-%/$$T>k,+:n%T.Cn^$SXoRI>4iQFHBK3_1X4B@b_u>a@C5BdNHWP,!m/29h\^6isI(i=1u(+KRRh.jURg>]!J[GWcDJmb((>k\9:pA[Oeuj4)X>A%KIEP[`.:U!aL2lG#N'F!]nLC*$udL70)B7cdYe)Sl(]W%gfj+dh;n?nQKfXH>3atZJn/*^2M_GEOh:L-U]Q';.':ChEr@."cY@(s%7iN$6,)8D2N.g\MRriUpS-2G1>l:&OMuh@kG-!h.Z#GG,[8cd,^5YUs/F2lq<D=57ih<(^IXBR03#*9<4Oc:Ci5VkG5"`iLi2S;C%@ocUN)I/]!(k\Y<lpjm$b+UUV@RE%BFHO1Yi5@Z/W:;FL%sC*6j&]_c3kNjG\H(mm;@8#."NMi)Lf>K2%`sA)6D0%J.)?Q7ZCs5u%[*EopWeH?6MH.8/pi6E,:%)UX*#J5ZIT>Xb)7r1($-5G\]1$nL12]mY1U>'aRW,%]=hW3aqTj\c2d!rUg!A"Ko`VIT#JZohB2lVa%Lh]0m)aHl_&GZ=SQdQN6T;ddO=f%%J:kuR_T8.CSOg_(_.nE[k6RE6S.O3[@LO;mR8it<mLfNWF,<&s?*,9oml3D4c*7mc6.pei@%9>K^EWT40JS3>SAQ(3QLV1>,Gc?:<oQr2t[>hZ#CJWk,-kK)rZ7EGWh,sE6s6A44X8Q+27X2^Q>BbZ=ZPOgq<QVc!?0\6+BbXdl7%)Gnp26k03QpP!#&8([-C_EQ"$@CG;nS68@Sk1[[uqZ]db,9OuRK^-0f#;NSCh8A`,F$_?]6Kj+pr#?OO*8"C@noL+ST);a4U-#Op%:5$\p#gL4"(XG*s+f#pL,EUs<[jLCeAUiU0K-g<YH;d@c^D?2%HNf]"/<CN9$WZ5Xo[W)g$+(u9FmUlFRhMKSGVDGjXs:$VaWF45%+N<V=roZfV,(_`JEWLr]gGa)kXD]r[X"PWO$&q:aUKDU%!!MO],8Ys2Ki=bB`sq]j9!2pE1Wo(i`2W":';qp7,gZH2+m]&*,OmPs%nFJJSLe6`s&c04E;9Hu=+HVEk"i6*NGsGBr0KV+KbkX/OK<Kkk+!*r^^'B"F8kMbt+:.Lm8"E68O]@07o)q@6`kk[k_LW%;4c`7J%M"4<pQ\kJeSPQP>KPIG\n9U7)**n==Zu_-Ue\qT_?jPb]0>f6c=D,6tn=l^b0/HSP[<%bDTZ2NJ_d*pJY2ET8Hs]NEqsB(Bn`$fu%iBb-*UgJ@CJPi(HGn:s=Mt.\q.RU&*_h/HYG`W/i#9@LL+G#-mXNcCYPBGRkffTO_<`8WbW&.iPig::3U^oL5<;$f+9F.Wfjg%C6%Bg%fr<$7s%$PU[epWO!YaoaScgbGMXeU-VL&2]S24VKlt@6t3?r2*F&ppkuf&Z*a*"KH!pM[<hB<?ZHXW+6?H3_ZItol3(UK&?^[%LqYR:'%H=8g?#.\*%$?7^=)J;:q"HS$PU[q0$87/4LCK8j$F#c8`Pg=8Pa"pFBkb4Pe+DETiWW#E$6e-;Be"8.Ts[@*,.n(T%GZ#%W"a@k3A+:TTC03#$8TC?n$ip0CudZ1<5N)`NXHlSE?Tk=?+>t]oT("F<'\Cm*>`2<LN_WC`GDK%W:s52c\4%c=@,.e8sU"J\.D;o%KF8UU5P@/kPbSPt],@?L@&e3O-ms08?+A5^&+)cp>>+R)b`bel>jf0bOR%)K6I8)(oiqdq+:uu^-isJ!&2nd,*%3.7gP*N&e>I9E%6C?*Gn$paC,^[ZTZ`T=KO\+AGR=WYn2[1QJ-4O9g(,UTJZ$+/]G9GDETT]t]i^7eTqK%)XrqHEOS$k+PZqpsN9P4Sdb?8H)YGYkh%bA]@.23BW!(7E+,/@E`739l2FTrSl^nhVR]7@)=0FKY43/t5umF;5mU=fEqlA\3jthRj@M#@.>;QQ\VJ)W`lD*TU>G%^q=-i1**8%6hFfkP`(u61d`2/l84(B<O8OTbV(ai-pPhXZ]a8O1YAST8;7i?Ou65$=MJgfOm(_?A0iduZs%#T@IMm;aFsQ`\gVJ?6clUsm:1Nm%39s[9:jRt1*(sIsZDi%HD.BMTKM]E=Ou&(<,\\-ipUWeF)'XpN>d50XgGdk:<eBRCc6u.39)`,G[>/I)N47NPMB[.[D?S9g\@-1<%:""PT%#$Nr=U<LsQ<'`-<[6,"L63S0DT4ArIG;iJKmAWc<PF<DDmgr#'$JMJ$t3>h&)=1QVQP(rS-"L9`sd-br6seP>J*pM68>AX%Q%[TjL@qZ9ccIqn+kCuS(#7:?[MNj$^^btK6+sJl?nd*'VTJ^MF'.QXa9HrCO7`m4!7JN@nI$jPaW,nYoJ!f&;Efn3MQ*km<EZ)"%L9CZLqoN'U$N-niAILGBQ+ln&Ab7INJ_8L6'N39k//+iW(LdGV.7CAI-T-2>/joLFe!?<?`K;3i*pgjUB'h'kB[hhAX5Oqt+Wjh3%adE$E[7R33%S'?VV/'"8ls`r_o!Fk%Z*1.9ZZ;mNa)T?Y.!s<sn2'O=;_-BSW#'C]4d/uCS^YrNR%\=[3U50JE5kdNVHgnDGEA]6%=mJ4e9Qc8GYYsH<F((#ARRLee?eJF(>nd\;aBkEH!Id8mZ>T3DMR]6NC6\M/&Ms?-WtdTj4aGctG^8Tkd/_9R[*5+2FV2rq%Q"lE%l]`fX636nQC;JIKO=6m0\>^,HBUTn>rggs"3#!rR^Vh`0JUj-+cC/<0(_'57!i8J/d$,a),]rd56%VUC706a$CQG2<2+qhK[OpPB%Mq'PAd']lc&77I$0!jqWA#0m4A#Y)d8pV:*b3VKrmDWcNR(JTP.1ji-+DOjsV7=i'ZGK'N:45BifFWel^TVhV<Z\KHPT$([!5UmF%'+Tr>WnRcI"8>gBWYQknA_JJGL!n^R*&?;q[5tu%$`85rfAO@:*'ari)]JG0Z(j,U9;Y7a:&lfl;!;"2"*UKgT"2^`J2+_1-k&(7%,U6rLpTnhB/g*p%/N$,-"fpJ<P_H^F]Tn#IIp>qV/#2$+6)9-Wk@b3]Z1*A#6FL-X/MVR#';@69bRLK,n2i2a0hjl7[R*p,S<`A/%44=uA;1.Q`[*<p/q-n_*1[EEs&5Wso.0_BW"h9o`FF!u#HFd%7@Xa@>PYhlAD@d(^leslYGXbY^hfFCdm&aVPMPB2&1*sbqYmu-2%PLI^l46&HL^l>QQe,pl<V=`=Yb6Sg3;nDIW8?[,Y49IGoR^nlOB,p"%%$-f>C*SXL^jJZhn`C]$_K*:M6kDp0&D1rh7Xu4HQdN<4%TJnA1cS_@m`ao4RW3a/YZJE<p(:RZ9Z3VA#e!n?>gnI/+%E3ArMGA.4AjIHne/[t8o6[g$")YJsjQ:al8loARYmI59f"%1OU7bGr%n-I8Uc^R?/%As]@Bn'Q^s7t^m"A71)m.^\JoHM7oo*6jSP<=2"I=IG4N&qH&TZ=qi:ae>NhU#@qX*N9HS1]'!2eT(R-f`mVpD\C_%KoCA<;tF7F0a$:RK"AD8p(DY&8Glc>g0t@ZaCr++Ne$oY=N4bT9KA(KISd#'7*c>Q[(/Ka>m97B"%XInk049qiaYC,3!"'$OJ'3'%!V3r9k.HKAC=ma8n$!idSjtCE[tW:u5d]>(:#.%o*)pPg657-`?DgNFW9DJ+:]Rk.2#3+^1)>M>b.`EH)A_oN9NVk-W2>RmnW.6!%I?!rQe0cX/JJBkJi#H;GGg+^Iko/Zu#sTbPeE#lnrVR[fMY+f_&#h8ha7;R+2o(UIYhin@1W*o6oX.'EYT67@#]sT/#?a7S)&4Q1%^CHPVV5Dt2kV2-5'Q+$uIPA2P^k1\Cd"X@eDL6K!)ci8&2+r@($7)L]<Ac#JD3ffDY>I;mG&GY8TFLDY"ifkG#TLJnebdJ/'.t[l%HiK`r->idjjUe._[>Nards6CH!&b5+dK$SH(C/'PB@OQ%6oM]ej,Um-[)cdKCJ:CP$BQ.Q;`0:hm1>neH*4ffKXsT^M&c5U7MOQo%^q,WBbQGW(4#jMamBg^qkU-F=:ReEd[s/:Gd>[A#=cGLJI9%4e/Q;Wkd=U20(3q<1Km.&Z+R.#06O#tRgW.[>:bEt2ni,+<0+/V2%AO';\81NdW*rTc-_ZKP[briFSd)uPMD5qF;]U%WKM`7:NZ<3j:8#kgq)(Z;op.?)(;.kP"/E^!EWO#[#i/-/de6L*'C<[71;hKBD%/LY#Hb#ust[;;,7C>.US<?`3>+`rLT+TT"86)C7fnN:QD[OFDU2H([<XHWurD-7[=<_C<q22WeA()+[4q?l@Pl'-!=L<E&C^n2ue%T:Ao^Q#6+<0/V#BCqA<Mp>n3p*%";E2Q1(_T!i2C1J`pdZV7+i$-cu71s$(R3Z>>!Z=o5$jgK"=F]Fe[\S[P3G*=Il%B&IkgG6ma%5gFa.P8B1Dag4@#BlZs+Ho]@q.^2b2>)(-*Q(s@LELbiei%[l"#d&B`2GFPpCo\g*e_;jiW_lY:45XY67'&=9lt)>B^pZd[L^$G`%"Vlm&4]2:?DVH-kS&U(uCF&0g:"'VeN1<7fP.*#@9C+KHigM2*ij)pj/WpJ[9sHKY,h@^JJ(l1AC+WBF!Oa<F5\>i%l8fVIbRfVl%dDP/VOm(iT;eCbTXCl@p/hf@CCn*bH*=nk%1oY7)AqNL%4gi(8KL?;;<R3%<(?3V>=u-O3dN4RjXI6FF:o8uPm#Nr;0%)XC*ai1p%B@.WUc2`,4[6LCODI"S-&=Yi&D1%j`71ZIHS*ZR-nW:b-H$&]-9TPe/ddm0j$G3AW>k+JmnQ$iDQoEJJ$kql1'/?p2M4.L%`T`XY%frA5YDC^i71aLCha9-5ndR0HG[K0;L!GifH"VSnX3I1iA4^pUoefR?QYhch=7j.N\;',n??`d^tMCgnIB(?4mOD.(m8tMtNgUq55%:-9bZVFSMh2j?UH71tl:(cJTU8[oO73C+):pXUT#F;.70G"q,nF'-UDhl9BTeF!]Yl]YT.DJNbi-&+qD[PUSV]Mi:?MqBBR1".R+%"+BF2ed>8i(8+1"&i7>1+K&7L#0;:a?5[Iab4@$IS@d5Hd4FNLNT6a:ieuqN0\mAT@c#Pd]W\d=cBsGSCFhID&m21(5hlk&W%_d?%+;AIZL5C3$d2<t8(;5#7'.]r_Krnm[s(7#?>,K3GRRrGnnBs*I:6d"sd0-,F\YEm@UE$dd9h^:>O?L<ZPAmF:@P:F`-8K^"PspXu%^.GB12^bp';YD7A>%ENF_R59NQ^uDN#`E/:Xn,q)bDbJi9Eo]s;_l/q1^*&p;>BaO-V@YR1CgGMM<\:]P9PoOEJ5DB^nI429ehWM%.A%`mg$G,"qn/OsQdcGoDh]!Y7]RblSWn@>=)Jd1jKW5&c^Bo+-29T%/S<)Ma>faGDnGIplXe0RYiSskI(mGo%2i?E1#n1'_#KZo%3*7^V>CuES)7aO9aCZ;/3%Vs5atblZ=9]c3)P+HAL4%)GeAF'"RU?$sAJoIIOTfZhJZu'oXt6@74_-)G;,P^GVdP[0bI[(=GbLsH%)5UImeRf]3R\j@n#$mt@ZOBlR.Ilnd"!"1XYeqWAWA,2?0&!V@#&[<`-X0gXT$j%1>bbCMK$?/F?N/*d%hRto6^HaNL_!AWb\dTX%]6LJURRN#mXoY_EkZ=p<p^e0,(>$@o[GpP8N+g]LKYo[C%iQb$\H\eQ7e^0JeLo`a"&$8Eo#3JD)Dhq(/a9c1Q"q'c*Trdo0<FKr%/r?FOd'(DF(bci19V^)`=rsP\Yer;J[GdMXh"89>VL^>0cH0N6#bFRM4/PkSKQX'%T7T.r;>V!O2p^FLLsbf&P^Ce105aT\kIanG%b?Er^WbAqn__Z&YMC>'/*,H;')K%#4]g<_#X'#h!hdPe]G<DXdg\(i>\[#sreiDRm87'DeM[7gUlbQdVX&ag99VYct[q?WR'C*YY%>NSU1=/FG&ZL$]$$`f;q#>GK[(_H@uZHO8&&E/KI9CQE$4]kg]SIF_Y/=FT?hI7fmc-tQ@;Y$g5)4$\^U+\:e8%4t:X\CTtC&*?4%Bc$HjYboRK<`4d49G$[<'`!:^Ak>kO$Iouk)C/Ed9hW&K'?-Wp!cpm%K9epV0^2c)$jb*f%S:CeGct+Y1`4WE(Q[tK/&h.Z<>.'p%m?anX7L=LAjuG`H5q&QXaC:aFVW8NsC+Q6`V)b[@.VcjH'`$5gI5H9]-A=o?B,&4QZ`_SfKoBnq6*hjO1\jF+_<NZ/Mt0p6R]L,H%@F^G[Y8'3^1d&R2Fsr)[U>Wq;M*DP+im_]fC7r@#SCYrtid+J,*V:2JkbB$#KS%L005A?!HI(b(lA'p'YeDpMDRL#j0@2PEUh7GS%oKk34bbV8c8>Of>N2FU!LK$-ek];K\WjaMp&m%abMf%OEH2+,RKmmD9PYIWLL4II1Vi-g"Mg+q,(7g/+?)tDc*I*Q!9D:7PZ@_%"%EHnG<dj^e1\J>rC,_IY#DV$'t)o;Ao(6d2C#mYcrO<q=:W+t3=RfC3!C+rglk,Qsr=<s?@6I@S/_F7MXVqT6"aJ^TE"i"H:9NK8n%LrGPl7WCpW\X@St`d1)i+%YN_O&r,,?.3pND!qHB(<cSS86T$f1$$"m_$bU8K.ML'VAC!.5QqMsVA"l'';R@X^d3X]HcA4d]U>[n%WNu=UXtaP\9**K`)DfQ`Xs#S9fZ"f`MgLp2Sh+B88`ot9eH4Sd`.5e!ocIJOQ8JUBDaP8?B3`6j%?6F?aOHs'L^M*A"A\O1-ce%[%=4EnL"(=]7#-e92)JEJ1+OV::h:eGD'GfKhbG8lR1k]IJo$eRGeeLXW(PkhkC6-I;9$o+u*#2+i'F:roX:e*!W%D6cn/*!&N>j:>%_unGT(eu'_Yoq>;di*JF?)<4.05rT0C;DWaDJ1aW/h6;q@qRY-(J>8X'aDXG^:HaXaWpHu]eKg8TWr-^0+'JnZ7ptZgQhHUH05!K%#8a$OD;LXBaf]a1La`aWXLud"S>Un+hI^nbD\+"]RcWkh[@fO>J.a[CSR81;Z6QK42<c[bLCQ746K??:e3q3aW*h"V)5OJbY?leJ%5^5q./r7nV^7HbTL$I/]ed_Recq82ao9iQ[GTSrl>I1Ee6<Uj*cAWr*CM`HC6([D+#h-\6^/5H#VdgarVE&>V#"+WcGShG^$VaRO%=H<ET%I`0u(bT\T6ZqDP&/'dN:21Ek9sDGM%jE]NZC[\8r(ZZCmQLmpPS,o9rSZSjJJnq&M"tsK+orMG$C!F''+cCc0J>COE&7Z5%E'aqs1k#Fd-GflE3SP)eNN=ksRml/UraeqiL=_IjFh[XriG*t7010[iLMDkg(q%qe]ko7;A:"2(;XJ_SbBh[\+S+/M=O83V\D\Ut%$oU::22I;?9gJF>Z3D3A[q2ZuHi7^,]+]S\p2Z]Ygb1074:[ADO"T/pDhPcIfj5V^diMu'S[9Gf'7=SB;3mGHg+3OPAB4dH^u84b%%&!"G;bSJNW2XZ=(j9X!*Vj\o2;rY_!]M9gW[s*]5fgEeP4"h6n#de(GqTtQh8ft[Z5ffC)C47o@Ohg4HK1F'K+HP'Efrp8Jh%#g%RV]ilfqSt&kCZd0<t!2Xo@cLOi,Chh@P)XDZO6"ap`u/Q%c7[<.?J2`0m)F=.*V:%(-II^%S0nPCI5'Ek"s#V.5lH"CSb7ZgB"((%-bSX[+@t@!ZuZt^#!2TIYng!Md]g=Vn/3"]dWCCl[hB:V7Z&9a4-<DELbUZTO^)'SOA-#fSSo<h],M<a#%qJ)A)nLc0&:L_$1jmt%`*+m[a;QFIW+ch_P7aa@Rr*C<h5qi&lmGR0r9`j>XN\1joD@RP,H/00#SPJf)Ko#aMN8_+XeHc0Bn@-E8fCgRfiJT3d>I(Nb=^9d%8Fm8`3\rh,MRoE2K^ZU77*59,?g^25()I6`%6bA#?'Gm&l2]4Vc"UR9;.8P2Lhk[Gh129YKoq`&-!>,epN(?k:n;%XYC.CBoY#jP%K&$C19QF\hCC4!8J`87P;")+[9QB(kkds3;_!6J.F7#:+Qri,n+Pr@hLh3X^BN69&HBKdS?*n?t,UJ:;,$NMMbcRii%eN.,=&b7f%^Brml"hh(VK6m2'&NY#an5:kKQ`fMg?kF&dj&E"2/#13WEN6d*bJ<1*9O=R&\Y'Hoa(6oj[7bh`%Yl!kJs*3iC>j:D;)d;8rQ(''%EQ;3%k]tOUIGfBIR$n:N_&Z_)pE&t1JQEgSq?Y_1G5^OnpmYYf7K"8a1(/"F_WdVu)QYtJV9[RB'*=)jKWO6N:\'eeZG4Ts(T_Z:%LA5:<@H,^qGpe96I^Efih\(Cq^[kRV_WENF3pJQkfX,NZiAPnu%:c'djE8lfor9+c%PHV2jHI02,#pY5W.)<&2Wc>'0'#EPo-WZ:%D*Rt'[^O#q>C5CqRfDqchYlN=s0hq)Vn`/Kb;]Itm;JSghu2U`J,dbXJ,;HZo?G$tp[)nUrUXsBq*3b#IIkWhij/#kIkC]koZt;J%p:%g6eSi0MqX+=^ec,dsO0%J.q8lG4m_?L5IgF"u_#~>%AI9_PrivateDataEnd